Ember.TEMPLATES.ads=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){d.buffer.push("<h1>Bootstrap for Ember</h1>")},useData:!0}),Ember.TEMPLATES.application=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push('<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    '),d.buffer.push(g((b.outlet||a&&a.outlet||f).call(a,"bs-tooltip-box",{name:"outlet",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}))),d.buffer.push("\r\n    <!-- Meta, title, CSS, favicons, etc. -->\r\n    "),d.buffer.push(g((b.partial||a&&a.partial||f).call(a,"header",{name:"partial",hash:{},hashTypes:{},hashContexts:{},types:["STRING"],contexts:[a],data:d}))),d.buffer.push('\r\n    <!-- Place anything custom after this. -->\r\n  </head>\r\n  <body>\r\n    <a class="sr-only" href="#content">Skip navigation</a>\r\n    <!-- Docs master nav -->\r\n    '),d.buffer.push(g((b.partial||a&&a.partial||f).call(a,"nav-main",{name:"partial",hash:{},hashTypes:{},hashContexts:{},types:["STRING"],contexts:[a],data:d}))),d.buffer.push("\r\n    "),d.buffer.push(g((b["bs-notifications"]||a&&a["bs-notifications"]||f).call(a,{name:"bs-notifications",hash:{style:"z-index: 9999; position: fixed; width: 50%; left: 0; right: 0; margin-left: auto; margin-right: auto; margin-top: 50px;"},hashTypes:{style:"STRING"},hashContexts:{style:a},types:[],contexts:[],data:d}))),d.buffer.push("\r\n    "),e=b._triageMustache.call(a,"bs-growl-notifications",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\r\n    <!-- Docs page layout -->\r\n    <div class="bs-header" id="content">\r\n      <div class="container">\r\n        <p>'),e=b._triageMustache.call(a,"page.lead",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push("</p>\r\n        "),d.buffer.push(g((b.partial||a&&a.partial||f).call(a,"ads",{name:"partial",hash:{},hashTypes:{},hashContexts:{},types:["STRING"],contexts:[a],data:d}))),d.buffer.push('\r\n      </div>\r\n    </div>\r\n\r\n    <div class="container bs-docs-container">\r\n      <div class="row">\r\n        <div class="col-md-3">\r\n          <div class="bs-sidebar hidden-print" role="complementary">\r\n              <ul class="nav bs-sidenav">\r\n                '),d.buffer.push(g((b.partial||a&&a.partial||f).call(a,"leftnav",{name:"partial",hash:{},hashTypes:{},hashContexts:{},types:["STRING"],contexts:[a],data:d}))),d.buffer.push('\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class="col-md-9" role="main">\r\n          '),e=b._triageMustache.call(a,"bs-breadcrumbs",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push("\r\n          "),e=b._triageMustache.call(a,"outlet",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <!-- Footer\r\n    ================================================== -->\r\n    <footer class="bs-footer" role="contentinfo">\r\n      <div class="container">\r\n        '),d.buffer.push(g((b.partial||a&&a.partial||f).call(a,"social-buttons",{name:"partial",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}))),d.buffer.push("\r\n      </div>\r\n    </footer>\r\n\r\n    <!-- JS and analytics only. -->\r\n    "),d.buffer.push(g((b.partial||a&&a.partial||f).call(a,"footer",{name:"partial",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}))),d.buffer.push("\r\n  </body>\r\n</html>\r\n"),h},useData:!0}),Ember.TEMPLATES["demo-template"]=Ember.HTMLBars.template({1:function(a,b,c,d){var e,f="";return e=b._triageMustache.call(a,"message",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push("\r\n"),f},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f,g,h=b.helperMissing,i=this.escapeExpression,j="function",k=b.blockHelperMissing,l="";return d.buffer.push(i((b["bs-page-header"]||a&&a["bs-page-header"]||h).call(a,{name:"bs-page-header",hash:{sub:"Hello world.",title:"Hello"},hashTypes:{sub:"STRING",title:"STRING"},hashContexts:{sub:a,title:a},types:[],contexts:[],data:d}))),d.buffer.push("\r\n"),f=null!=(f=b["bs-well"]||(null!=a?a["bs-well"]:a))?f:h,g={name:"bs-well",hash:{},hashTypes:{},hashContexts:{},fn:this.program(1,d),inverse:this.noop,types:[],contexts:[],data:d},e=typeof f===j?f.call(a,g):f,b["bs-well"]||(e=k.call(a,e,g)),null!=e&&d.buffer.push(e),l},useData:!0}),Ember.TEMPLATES.footer=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){return""},useData:!0}),Ember.TEMPLATES.header=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){return""},useData:!0}),Ember.TEMPLATES.index=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){d.buffer.push('<div class="bs-docs-section">\r\n  <div class="page-header">\r\n    <h1 id="js-overview">Showcase</h1>\r\n\r\n    <h3 id="js-individual-compiled">Project Created!</h3>\r\n    <p>Please choose components from the left pane.</p>\r\n  </div>')},useData:!0}),Ember.TEMPLATES.leftnav=Ember.HTMLBars.template({1:function(a,b,c,d){var e,f=b.helperMissing,g="";return d.buffer.push("    <li>\r\n"),e=(b["link-to"]||a&&a["link-to"]||f).call(a,"item.route",{name:"link-to",hash:{},hashTypes:{},hashContexts:{},fn:this.program(2,d),inverse:this.noop,types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push("    </li>\r\n"),g},2:function(a,b,c,d){var e,f="";return d.buffer.push("            "),e=b._triageMustache.call(a,"item.title",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push("\r\n"),e=b["if"].call(a,"item.special",{name:"if",hash:{},hashTypes:{},hashContexts:{},fn:this.program(3,d),inverse:this.noop,types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),e=b["if"].call(a,"item.new",{name:"if",hash:{},hashTypes:{},hashContexts:{},fn:this.program(5,d),inverse:this.noop,types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),f},3:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push("                "),d.buffer.push(f((b["bs-label"]||a&&a["bs-label"]||e).call(a,{name:"bs-label",hash:{type:"danger",content:"Special"},hashTypes:{type:"STRING",content:"STRING"},hashContexts:{type:a,content:a},types:[],contexts:[],data:d}))),d.buffer.push("\r\n"),g},5:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push("              "),d.buffer.push(f((b["bs-label"]||a&&a["bs-label"]||e).call(a,{name:"bs-label",hash:{type:"info",content:"New"},hashTypes:{type:"STRING",content:"STRING"},hashContexts:{type:a,content:a},types:[],contexts:[],data:d}))),d.buffer.push("\r\n"),g},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e;e=b.each.call(a,"item","in","controller",{name:"each",hash:{},hashTypes:{},hashContexts:{},fn:this.program(1,d),inverse:this.noop,types:["ID","ID","ID"],contexts:[a,a,a],data:d}),d.buffer.push(null!=e?e:"")},useData:!0}),Ember.TEMPLATES["nav-main"]=Ember.HTMLBars.template({1:function(a,b,c,d){d.buffer.push("Bootstrap for Ember")},3:function(a,b,c,d){d.buffer.push("Home")},5:function(a,b,c,d){d.buffer.push("Components")},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g="";return d.buffer.push('<header class="navbar navbar-inverse navbar-fixed-top bs-docs-nav" role="banner">\r\n  <div class="container">\r\n    <div class="navbar-header">\r\n      <button class="navbar-toggle" type="button" data-toggle="collapse" data-target=".bs-navbar-collapse">\r\n        <span class="sr-only">Toggle navigation</span>\r\n        <span class="icon-bar"></span>\r\n        <span class="icon-bar"></span>\r\n        <span class="icon-bar"></span>\r\n      </button>\r\n      '),e=(b["link-to"]||a&&a["link-to"]||f).call(a,"index",{name:"link-to",hash:{"class":"navbar-brand"},hashTypes:{"class":"STRING"},hashContexts:{"class":a},fn:this.program(1,d),inverse:this.noop,types:["STRING"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\r\n    </div>\r\n    <nav class="collapse navbar-collapse bs-navbar-collapse" role="navigation">\r\n      <ul class="nav navbar-nav">\r\n        <li>\r\n            '),e=(b["link-to"]||a&&a["link-to"]||f).call(a,"index",{name:"link-to",hash:{},hashTypes:{},hashContexts:{},fn:this.program(3,d),inverse:this.noop,types:["STRING"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push("\r\n        </li>\r\n\r\n        <li>\r\n            "),e=(b["link-to"]||a&&a["link-to"]||f).call(a,"show_components",{name:"link-to",hash:{},hashTypes:{},hashContexts:{},fn:this.program(5,d),inverse:this.noop,types:["STRING"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push("\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  </div>\r\n</header>\r\n"),g},useData:!0}),Ember.TEMPLATES["show_components/alert"]=Ember.HTMLBars.template({1:function(a,b,c,d){var e=this.escapeExpression,f="";return d.buffer.push('    <h4 class="alert-heading">Oh snap! You got an error!</h4>\n    <p>Alert can also be used in a <strong>block form</strong>.</p>\n    <p>\n        <button class="btn btn-danger" '),d.buffer.push(e(b.action.call(a,"submit",{name:"action",hash:{},hashTypes:{},hashContexts:{},types:["STRING"],contexts:[a],data:d}))),d.buffer.push('>Take this action</button> <a class="btn btn-default">Or do this</a>\n    </p>\n'),f},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push('<h1 id="alert">Alert</h1>\n<h2 id="usage-examples">Usage Examples</h2>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-alert"]||a&&a["bs-alert"]||f).call(a,{name:"bs-alert",hash:{type:"warning",message:"A warning alert with simple message."},hashTypes:{type:"STRING",message:"STRING"},hashContexts:{type:a,message:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-alert message="A warning alert with simple message." type="warning"&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-alert"]||a&&a["bs-alert"]||f).call(a,{name:"bs-alert",hash:{dismiss:!0,type:"warning",message:"With close button"},hashTypes:{dismiss:"BOOLEAN",type:"STRING",message:"STRING"},hashContexts:{dismiss:a,type:a,message:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-alert message="With close button" type="warning" dismiss=true&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-alert"]||a&&a["bs-alert"]||f).call(a,{name:"bs-alert",hash:{fade:!0,dismiss:!0,type:"warning",message:"Close button will fade"},hashTypes:{fade:"BOOLEAN",dismiss:"BOOLEAN",type:"STRING",message:"STRING"},hashContexts:{fade:a,dismiss:a,type:a,message:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-alert message="Close button will fade" type="warning" dismiss=true fade=true&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-alert"]||a&&a["bs-alert"]||f).call(a,{name:"bs-alert",hash:{dismissAfter:5,fade:!0,type:"info",message:"Dismissed after 5 seconds!!"},hashTypes:{dismissAfter:"NUMBER",fade:"BOOLEAN",type:"STRING",message:"STRING"},hashContexts:{dismissAfter:a,fade:a,type:a,message:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-alert message="Dismissed after 5 seconds" type="info" dismissAfter=5&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-alert"]||a&&a["bs-alert"]||f).call(a,{name:"bs-alert",hash:{type:"success",message:"Other types such as Sucess"},hashTypes:{type:"STRING",message:"STRING"},hashContexts:{type:a,message:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-alert message="Other types such as Sucess" type="success"&#125;&#125;</code></pre>\n<div class="bs-example">\n'),e=(b["bs-alert"]||a&&a["bs-alert"]||f).call(a,{name:"bs-alert",hash:{type:"danger"},hashTypes:{type:"STRING"},hashContexts:{type:a},fn:this.program(1,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-alert type="danger"&#125;&#125;\n&lt;h4 class="alert-heading"&gt;Oh snap! You got an error!&lt;/h4&gt;\n&lt;p&gt;Alert can also be used in a &lt;strong&gt;block form&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;\n&lt;button class="btn btn-danger" &#123;&#123;action "submit"&#125;&#125;&gt;Take this action&lt;/button&gt; &lt;a class="btn btn-default"&gt;Or do this&lt;/a&gt;\n&lt;/p&gt;\n&#123;&#123;/bs-alert&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-alert"]||a&&a["bs-alert"]||f).call(a,{name:"bs-alert",hash:{close:"didAlertClose",closed:"didAlertClosed",dismiss:!0,type:"warning",message:"Close will trigger a function in controller"},hashTypes:{close:"STRING",closed:"STRING",dismiss:"BOOLEAN",type:"STRING",message:"STRING"},hashContexts:{close:a,closed:a,dismiss:a,type:a,message:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-alert message="Close will trigger a function in controller" type="warning" dismiss=true closed="didAlertClosed" close="didAlertClose"&#125;&#125;</code></pre>\n<h2 id="component-properties">Component Properties</h2>\n<div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>message</td>\n                <td>The string to display in the alert.</td>\n            </tr>\n            <tr>\n                <td>type</td>\n                <td>Alert types: success | info | warning | danger</td>\n            </tr>\n            <tr>\n                <td>dismiss</td>\n                <td>if true an <code>X</code> link is set to dismiss the alert.</td>\n            </tr>\n            <tr>\n                <td>dismissAfter</td>\n                <td>If set the alert will be automatically dismissed after the specified amount of <code>seconds</code></td>\n            </tr>\n            <tr>\n                <td>fade</td>\n                <td>If true, the dialog will be faded out when closed.</td>\n            </tr>\n            <tr>\n                <td>close</td>\n                <td>Triggers the specified function name on the <strong>controller</strong> immediately when the close instance method is called.</td>\n            </tr>\n            <tr>\n                <td>closed</td>\n                <td>Triggers the specified function name on the <strong>controller</strong> when the alert has been closed (will wait for CSS transitions to complete).</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n'),h},useData:!0}),Ember.TEMPLATES["show_components/badge"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push('<h1 id="badge">Badge</h1>\n<div class="bs-example">\n    <a href="#"> Inbox '),d.buffer.push(f((b["bs-badge"]||a&&a["bs-badge"]||e).call(a,{name:"bs-badge",hash:{content:"42"},hashTypes:{content:"STRING"},hashContexts:{content:a},types:[],contexts:[],data:d}))),d.buffer.push(' </a>\n</div>\n\n<pre><code class="lang-html">&lt;a href="#"&gt; Inbox&#123;&#123;bs-badge content="42"&#125;&#125; &lt;/a&gt;</code></pre>\n<h2 id="built-in-styles">Built-in styles</h2>\n<p>Works well with built-in styles that are included for placing badges in active states in pill and list navigations.</p>\n<div class="bs-example">\n    <ul class="nav nav-pills">\n        <li class="active"><a href="#">Home '),d.buffer.push(f((b["bs-badge"]||a&&a["bs-badge"]||e).call(a,{name:"bs-badge",hash:{content:42},hashTypes:{content:"NUMBER"},hashContexts:{content:a},types:[],contexts:[],data:d}))),d.buffer.push('</a></li>\n        <li><a href="#">Profile</a></li>\n        <li><a href="#">Messages '),d.buffer.push(f((b["bs-badge"]||a&&a["bs-badge"]||e).call(a,{name:"bs-badge",hash:{content:3},hashTypes:{content:"NUMBER"},hashContexts:{content:a},types:[],contexts:[],data:d}))),d.buffer.push('</a></li>\n    </ul>\n    <br>\n    <ul class="nav nav-pills nav-stacked" style="max-width: 260px;">\n        <li class="active">\n            <a href="#">\n                '),d.buffer.push(f((b["bs-badge"]||a&&a["bs-badge"]||e).call(a,{name:"bs-badge",hash:{content:42,"class":"pull-right"},hashTypes:{content:"NUMBER","class":"STRING"},hashContexts:{content:a,"class":a},types:[],contexts:[],data:d}))),d.buffer.push('\n                Home\n            </a>\n        </li>\n        <li><a href="#">Profile</a></li>\n        <li>\n            <a href="#">\n                '),d.buffer.push(f((b["bs-badge"]||a&&a["bs-badge"]||e).call(a,{name:"bs-badge",hash:{content:3,"class":"pull-right"},hashTypes:{content:"NUMBER","class":"STRING"},hashContexts:{content:a,"class":a},types:[],contexts:[],data:d}))),d.buffer.push('\n                Messages\n            </a>\n        </li>\n    </ul>\n</div>\n\n<pre><code class="lang-html">&lt;ul class="nav nav-pills"&gt;\n    &lt;li class="active"&gt;&lt;a href="#"&gt;Home &#123;&#123;bs-badge content=42&#125;&#125;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href="#"&gt;Profile&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href="#"&gt;Messages &#123;&#123;bs-badge content=3&#125;&#125;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;br&gt;\n&lt;ul class="nav nav-pills nav-stacked" style="max-width: 260px;"&gt;\n    &lt;li class="active"&gt;\n        &lt;a href="#"&gt;\n            &#123;&#123;bs-badge class="pull-right"content=42&#125;&#125;\n            Home\n        &lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li&gt;&lt;a href="#"&gt;Profile&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;\n        &lt;a href="#"&gt;\n            &#123;&#123;bs-badge class="pull-right"content=3&#125;&#125;\n            Messages\n        &lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<h2 id="component-properties">Component Properties</h2>\n<div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>content</td>\n                <td>string: The content of the badge.</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'),g},useData:!0}),Ember.TEMPLATES["show_components/breadcrumbs"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){d.buffer.push('<h1 id="breadcrumbs">Breadcrumbs</h1>\n<p>Indicate the current page&#39;s location within a navigational hierarchy.</p>\n<p>The breadcrumbs is magically constructed by interpreting the current router location,</p>\n<p><em>Move between components and look at the showcase&#39;s breadcrumbs on the top of the screen </em></p>\n<p>The only thing needed to setup breadcrumbs is add to one of your top templates (such <em>application</em> template):</p>\n<pre><code class="lang-html">&#123;&#123;bs-breadcrumbs&#125;&#125;</code></pre>\n<h1 id="breadcrumbs-names">Breadcrumbs Names</h1>\n<p>By default the name of the breadcrumbs is set to the route name,\nyou can change this behavior by specifying some meta info on the route:</p>\n<pre><code class="lang-javascript">SomeRoute = Ember.Route.extend({\n    breadcrumbs: {name: &#39;Primary&#39;}\n\n    ...\n})</code></pre>\n')},useData:!0}),Ember.TEMPLATES["show_components/button"]=Ember.HTMLBars.template({1:function(a,b,c,d){d.buffer.push("Content")},3:function(a,b,c,d){d.buffer.push("Primary")},5:function(a,b,c,d){d.buffer.push("Link")},7:function(a,b,c,d){d.buffer.push("Default Large button")},9:function(a,b,c,d){d.buffer.push("Block Button")},11:function(a,b,c,d){d.buffer.push("Disabled Button")},13:function(a,b,c,d){d.buffer.push("Button with Param")},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f,g,h="function",i=b.helperMissing,j=b.blockHelperMissing,k=this.escapeExpression,l="";return d.buffer.push('<h1 id="button">Button</h1>\n<h2 id="types">Types</h2>\n<div class="bs-example">\n    '),f=null!=(f=b["bs-button"]||(null!=a?a["bs-button"]:a))?f:i,g={name:"bs-button",hash:{},hashTypes:{},hashContexts:{},fn:this.program(1,d),inverse:this.noop,types:[],contexts:[],data:d},e=typeof f===h?f.call(a,g):f,b["bs-button"]||(e=j.call(a,e,g)),null!=e&&d.buffer.push(e),d.buffer.push("\n    "),d.buffer.push(k((b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{title:"Inline Text"},hashTypes:{title:"STRING"},hashContexts:{title:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),e=(b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{type:"primary"},hashTypes:{type:"STRING"},hashContexts:{type:a},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push("\n    "),e=(b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{type:"link"},hashTypes:{type:"STRING"},hashContexts:{type:a},fn:this.program(5,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n\n    <p>All other types such as <strong>info</strong>, <strong>warning</strong>, <strong>danger</strong> are supported.</p>\n</div>\n\n\n<pre><code class="lang-html">&lt;!-- Standard gray default button with gradient --&gt;\n&#123;&#123;#bs-button&#125;&#125;Content&#123;&#123;/bs-button&#125;&#125;\n\n&lt;!--Inline text as button content--&gt;\n&#123;&#123;bs-button title="Inline Text"&#125;&#125;\n\n&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;\n&#123;&#123;#bs-button type="primary"&#125;&#125;Primary&#123;&#123;/bs-button&#125;&#125;\n\n&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;\n&#123;&#123;#bs-button type="link"&#125;&#125;Link&#123;&#123;/bs-button&#125;&#125;</code></pre>\n<h2 id="sizes">Sizes</h2>\n<p>In correspondence with bootstrap css class button sizes <code>.btn-lg</code>, <code>.btn-sm</code>, or <code>.btn-xs</code>, size can simply defined by the <em>size</em> property or use one of the size properties: <code>small=true</code>, <code>large=true</code>, <code>xs=true</code></p>\n<div class="bs-example">\n    <p>\n        '),d.buffer.push(k((b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{title:"Primary Extra Small Button",size:"xs",type:"primary"},hashTypes:{title:"STRING",size:"STRING",type:"STRING"},hashContexts:{title:a,size:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push("\n        "),d.buffer.push(k((b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{title:"Info Small Button",small:!0,type:"info"},hashTypes:{title:"STRING",small:"BOOLEAN",type:"STRING"},hashContexts:{title:a,small:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push("\n        "),d.buffer.push(k((b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{title:"Danger Default size button",type:"danger"},hashTypes:{title:"STRING",type:"STRING"},hashContexts:{title:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push("\n        "),e=(b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{size:"lg"},hashTypes:{size:"STRING"},hashContexts:{size:a},fn:this.program(7,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n    </p>\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-button type="primary" size="xs" title="Primary Extra Small Button"&#125;&#125;\n&#123;&#123;bs-button type="info" small=true title="Info Small Button"&#125;&#125;\n&#123;&#123;bs-button type="danger" title="Danger Default size button"&#125;&#125;\n&#123;&#123;#bs-button size="lg"&#125;&#125;Default Large button&#123;&#123;/bs-button&#125;&#125;</code></pre>\n<h2 id="icon">Icon</h2>\n<div class="bs-example">\n    <p>\n        '),d.buffer.push(k((b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{title:"Button with Icon",icon:"fa fa-check"},hashTypes:{title:"STRING",icon:"STRING"},hashContexts:{title:a,icon:a},types:[],contexts:[],data:d}))),d.buffer.push('\n    <p>\n</div>\n\n<p>Simply add an <code>icon</code> property to the button meta data, such:</p>\n<pre><code class="lang-html">&#123;&#123;bs-button icon="fa fa-check" title="Danger Default size button"&#125;&#125;</code></pre>\n<p>Will render an <code>&lt;i class="fa fa-check"&gt;&lt;/i&gt;</code> tag within the button tag.</p>\n<h2 id="block-level">Block Level</h2>\n<p>block level buttons—those that span the full width of a parent— by adding <code>block=true</code></p>\n<div class="bs-example">\n    '),e=(b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{block:!0,xs:!0,type:"primary"},hashTypes:{block:"BOOLEAN",xs:"BOOLEAN",type:"STRING"},hashContexts:{block:a,xs:a,type:a},fn:this.program(9,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-button type="primary" xs=true block=true}}Block Button&#123;&#123;/bs-button&#125;&#125;</code></pre>\n<h2 id="disbled-state">Disbled state</h2>\n<p>As in Bootstrap, set <code>disabled="disabled"</code>/<code>disabled=true</code> to make the button unclickable.</p>\n<div class="bs-example">\n    '),e=(b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{disabled:!0,type:"primary"},hashTypes:{disabled:"BOOLEAN",type:"STRING"},hashContexts:{disabled:a,type:a},fn:this.program(11,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-button type="primary" disabled=true&#125;&#125;Disabled Button&#123;&#123;/bs-button&#125;&#125;</code></pre>\n<p>Disabled state can also be hooked to a controller property</p>\n<div class="bs-example">\n    '),d.buffer.push(k((b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{clicked:"disableButton",disabled:"isButtonDisabled",title:"Click to disable",type:"primary"},hashTypes:{clicked:"STRING",disabled:"ID",title:"STRING",type:"STRING"},hashContexts:{clicked:a,disabled:a,title:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-button type="primary" title="Click to disable" disabled=isButtonDisabled clicked="disableButton"&#125;&#125;</code></pre>\n<ul>\n<li><code>isButtonDisabled</code> is a boolean property on the controller</li>\n<li><code>disableButton</code> is a function on the controller that sets <code>isButtonDisabled</code> to <em>false</em></li>\n</ul>\n<h2 id="param">Param</h2>\n<p>It is possible to pass a parameter to the action in the controller that is bound to the click event by using the <code>clickedParam</code> property.</p>\n<div class="bs-example">\n    '),e=(b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{clickedParamBinding:"controller",clicked:"buttonWithParam",type:"primary"},hashTypes:{clickedParamBinding:"STRING",clicked:"STRING",type:"STRING"},hashContexts:{clickedParamBinding:a,clicked:a,type:a},fn:this.program(13,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">&#123;&#123;#bs-button type="primary" clicked="buttonWithParam" clickedParamBinding="controller"&#125;&#125;Button with Param&#123;&#123;/bs-button&#125;&#125;</code></pre>\n<p>Action in controller:</p>\n<pre><code class="lang-javascript">MyController = Ember.Controller.extend({\n    actions: {\n        buttonWithParam: function(expectedMyself) {\n            alert("Passed controller as a param: " + expectedMyself);\n        }\n    }\n)}</code></pre>\n<h2 id="state">State</h2>\n<p>By Bootstrap:</p>\n<blockquote>\n<p>Add <code>data-loading-text="Loading..."</code> to use a loading state on a button.</p>\n</blockquote>\n<p>Then extra <code>loading=loadingState</code> is needed where <em>loadingState</em> is a property in the <em>controller</em> that returns a string which\ndefines the current state of the button:</p>\n<ul>\n<li>If <code>loadingState</code> property equals <code>loading</code> then the button will be disabled and its text will change to the value of the <code>data-loading-text</code> button property.</li>\n<li>If its value is <code>null</code> then the button will be re-enabled and its text will be modified to the original value defined in the <code>title</code> button property.</li>\n</ul>\n<div class="bs-example">\n    '),d.buffer.push(k((b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{clicked:"startLoading",title:"Submit",clicked:"disableButton",loading:"loadingState","data-loading-text":"Loading...",type:"primary"},hashTypes:{clicked:"STRING",title:"STRING",clicked:"STRING",loading:"ID","data-loading-text":"STRING",type:"STRING"},hashContexts:{clicked:a,title:a,clicked:a,loading:a,"data-loading-text":a,type:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">&#123;&#123;bs-button type="primary" data-loading-text="Loading..." loading=loadingState title="Submit" clicked="startLoading"&#125;&#125;</code></pre>\n<p>In controller:</p>\n\n<pre><code class="lang-javascript">startLoading: function() {\n    var _this = this;\n    this.set(&#39;loadingState&#39;, &#39;loading&#39;);\n    return Ember.run.later(function() {\n      return _this.set(&#39;loadingState&#39;, null);\n    }, 2000);\n}</code></pre>\n<p>The <code>loading</code> property may also return any string that matches one of the <code>data-foo-text</code> button property to render other text\nbut the original text of the button when the loading state completes.</p>\n<div class="bs-example">\n    '),d.buffer.push(k((b["bs-button"]||a&&a["bs-button"]||i).call(a,{name:"bs-button",hash:{clicked:"startLoading1",title:"Submit!",loading:"loadingState1","data-completed-text":"Completed!","data-loading-text":"Loading...",type:"primary"},hashTypes:{clicked:"STRING",title:"STRING",loading:"ID","data-completed-text":"STRING","data-loading-text":"STRING",type:"STRING"},hashContexts:{clicked:a,title:a,loading:a,"data-completed-text":a,"data-loading-text":a,type:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-javascript">startLoading1: function() {\n    var _this = this;\n    this.set(&#39;loadingState&#39;, &#39;loading&#39;);\n    return Ember.run.later(function() {\n      return _this.set(&#39;loadingState&#39;, &#39;completed&#39;);\n    }, 2000);\n}</code></pre>\n<p>Pay attention that this time the <code>loadingState</code> is set to <code>completed</code> and not <code>null</code>.</p>\n<h2 id="component-properties">Component Properties</h2>\n<div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>type</td>\n                <td>Alert types: <em>success</em> | <em>info</em> | <em>warning</em> | <em>danger</em></td>\n            </tr>\n            <tr>\n                <td>title</td>\n                <td>A string representing the text of the button (<em>not required if component is used as a block component</em>)</td>\n            </tr>\n            <tr>\n                <td>clicked</td>\n                <td>Triggers the specified function name on the <strong>controller</strong> immediately when the button is clicked.</td>\n            </tr>\n            <tr>\n                <td>clickedParam</td>\n                <td>A parameter to pass the action to be invoked immediately when the button is clicked</td>\n            </tr>\n            <tr>\n                <td>size</td>\n                <td>Can be: <em>xs</em> | <em>sm</em> | <em>lg</em></td>\n            </tr>\n            <tr>\n                <td>xs</td>\n                <td>If set to <em>true</em> it is equivalent to <code>size=xs</code></td>\n            </tr>\n            <tr>\n                <td>small</td>\n                <td>If set to <em>true</em> it is equivalent to <code>size=small</code></td>\n            </tr>\n            <tr>\n                <td>large</td>\n                <td>If set to <em>true</em> it is equivalent to <code>size=large</code></td>\n            </tr>\n            <tr>\n                <td>block</td>\n                <td>If <em>true</em> the button is a block level and will span the full width of its parent</td>\n            </tr>\n            <tr>\n                <td>disabled</td>\n                <td>If <em>true</em> the button will be disabled, can also be bound to a <em>controller</em> property</td>\n            </tr>\n            <tr>\n                <td>loading</td>\n                <td>Bound to a controller property that defines the state of the button.</td>\n            </tr>\n            <tr>\n                <td>data-loading-text</td>\n                <td>If <code>loading=foo</code> and <code>foo</code> is a property in the <em>controller</em> and <code>foo</code> property returns <code>loading</code>, then the text of the button will be changed to the value of <em>this</em> property.</td>\n            </tr>\n            <tr>\n                <td>data-xxx-text</td>\n                <td>If <code>loading=foo</code> and <code>foo</code> is a property in the <em>controller</em> and <code>foo</code> property returns <code>xxx</code>, then the text of the button will be changed to the value of <em>this</em> property.</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'),
l},useData:!0}),Ember.TEMPLATES["show_components/buttonGroup"]=Ember.HTMLBars.template({1:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push("        "),d.buffer.push(f((b["bs-btn-group"]||a&&a["bs-btn-group"]||e).call(a,{name:"bs-btn-group",hash:{selectedBinding:"selected",contentBinding:"options"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n        "),d.buffer.push(f((b["bs-btn-group"]||a&&a["bs-btn-group"]||e).call(a,{name:"bs-btn-group",hash:{selectedBinding:"selected",contentBinding:"options2"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n"),g},3:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push("        "),d.buffer.push(f((b["bs-btn-group"]||a&&a["bs-btn-group"]||e).call(a,{name:"bs-btn-group",hash:{selectedBinding:"selected",contentBinding:"options",size:"lg"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING",size:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a,size:a},types:[],contexts:[],data:d}))),d.buffer.push("\n"),g},5:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push("        "),d.buffer.push(f((b["bs-btn-group"]||a&&a["bs-btn-group"]||e).call(a,{name:"bs-btn-group",hash:{selectedBinding:"selected",contentBinding:"options"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n"),g},7:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push("        "),d.buffer.push(f((b["bs-btn-group"]||a&&a["bs-btn-group"]||e).call(a,{name:"bs-btn-group",hash:{selectedBinding:"selected",contentBinding:"options",small:!0},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING",small:"BOOLEAN"},hashContexts:{selectedBinding:a,contentBinding:a,small:a},types:[],contexts:[],data:d}))),d.buffer.push("\n"),g},9:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push("        "),d.buffer.push(f((b["bs-btn-group"]||a&&a["bs-btn-group"]||e).call(a,{name:"bs-btn-group",hash:{selectedBinding:"selected",contentBinding:"options",size:"xs"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING",size:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a,size:a},types:[],contexts:[],data:d}))),d.buffer.push("\n"),g},11:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push("        "),d.buffer.push(f((b["bs-btn-group"]||a&&a["bs-btn-group"]||e).call(a,{name:"bs-btn-group",hash:{selectedBinding:"selected",contentBinding:"optionsWithMeta",size:"lg"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING",size:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a,size:a},types:[],contexts:[],data:d}))),d.buffer.push("\n"),g},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f,g,h=b.helperMissing,i=this.escapeExpression,j="function",k=b.blockHelperMissing,l="";return d.buffer.push('<h1 id="button-group">Button Group</h1>\n<p>To wrap a series of buttons, use the <em>bs-btn-group</em> component.</p>\n<h2 id="standard">Standard</h2>\n<div class="bs-example">\n    '),d.buffer.push(i((b["bs-btn-group"]||a&&a["bs-btn-group"]||h).call(a,{name:"bs-btn-group",hash:{selectedBinding:"selected",contentBinding:"options"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    <br/>\n    Controller say selected item is: "),e=b._triageMustache.call(a,"selected",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n</div>\n\n<p><em>content</em> is an array of options, each option is rendered as a <em>button</em> tag.</p>\n<p><strong>TODO: SHOW CODE</strong></p>\n<h2 id="icons">Icons</h2>\n<p>It is possible to set an icon for the selected button in a group or/and an icon for the in-active buttons by\nsetting the <code>icon_active</code> and/or <code>icon_inactive</code> properties to the icon class name.</p>\n<div class="bs-example">\n    '),d.buffer.push(i((b["bs-btn-group"]||a&&a["bs-btn-group"]||h).call(a,{name:"bs-btn-group",hash:{selectedBinding:"selected",contentBinding:"options",icon_active:"fa fa-check-square-o",icon_inactive:"fa fa-square-o"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING",icon_active:"STRING",icon_inactive:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a,icon_active:a,icon_inactive:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    <br/>\n    Controller say selected item is: "),e=b._triageMustache.call(a,"selected",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&lt;div class="bs-example"&gt;\n    &#123;&#123;bs-btn-group icon_inactive="fa fa-square-o" icon_active="fa fa-check-square-o" contentBinding="options" selectedBinding="selected"&#125;&#125;\n    &lt;br/&gt;\n    Controller say selected item is: &#123;&#123;selected&#125;&#125;\n&lt;/div&gt;</code></pre>\n<h2 id="button-toolbar">Button Toolbar</h2>\n<p>Combine sets of bs-btn-groups into a bs-btn-toolbar for more complex components.</p>\n<div class="bs-example">\n'),f=null!=(f=b["bs-btn-toolbar"]||(null!=a?a["bs-btn-toolbar"]:a))?f:h,g={name:"bs-btn-toolbar",hash:{},hashTypes:{},hashContexts:{},fn:this.program(1,d),inverse:this.noop,types:[],contexts:[],data:d},e=typeof f===j?f.call(a,g):f,b["bs-btn-toolbar"]||(e=k.call(a,e,g)),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<h2 id="sizing">Sizing</h2>\n<p>You can set size in the group level instead of setting size per button.</p>\n<div class="bs-example">\n'),f=null!=(f=b["bs-btn-toolbar"]||(null!=a?a["bs-btn-toolbar"]:a))?f:h,g={name:"bs-btn-toolbar",hash:{},hashTypes:{},hashContexts:{},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d},e=typeof f===j?f.call(a,g):f,b["bs-btn-toolbar"]||(e=k.call(a,e,g)),null!=e&&d.buffer.push(e),f=null!=(f=b["bs-btn-toolbar"]||(null!=a?a["bs-btn-toolbar"]:a))?f:h,g={name:"bs-btn-toolbar",hash:{},hashTypes:{},hashContexts:{},fn:this.program(5,d),inverse:this.noop,types:[],contexts:[],data:d},e=typeof f===j?f.call(a,g):f,b["bs-btn-toolbar"]||(e=k.call(a,e,g)),null!=e&&d.buffer.push(e),f=null!=(f=b["bs-btn-toolbar"]||(null!=a?a["bs-btn-toolbar"]:a))?f:h,g={name:"bs-btn-toolbar",hash:{},hashTypes:{},hashContexts:{},fn:this.program(7,d),inverse:this.noop,types:[],contexts:[],data:d},e=typeof f===j?f.call(a,g):f,b["bs-btn-toolbar"]||(e=k.call(a,e,g)),null!=e&&d.buffer.push(e),f=null!=(f=b["bs-btn-toolbar"]||(null!=a?a["bs-btn-toolbar"]:a))?f:h,g={name:"bs-btn-toolbar",hash:{},hashTypes:{},hashContexts:{},fn:this.program(9,d),inverse:this.noop,types:[],contexts:[],data:d},e=typeof f===j?f.call(a,g):f,b["bs-btn-toolbar"]||(e=k.call(a,e,g)),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n\n<h2 id="vertical-variation">Vertical variation</h2>\n<p>Make a set of buttons appear vertically stacked rather than horizontally by adding <code>vertical=true</code>.</p>\n<div class="bs-example">\n    '),d.buffer.push(i((b["bs-btn-group"]||a&&a["bs-btn-group"]||h).call(a,{name:"bs-btn-group",hash:{vertical:!0,selectedBinding:"selected",contentBinding:"options"},hashTypes:{vertical:"BOOLEAN",selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{vertical:a,selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<h2 id="buttons-with-metadata">Buttons with Metadata</h2>\n<p>It is possible to provide extra metadata per button in the group.</p>\n<div class="bs-example">\n'),f=null!=(f=b["bs-btn-toolbar"]||(null!=a?a["bs-btn-toolbar"]:a))?f:h,g={name:"bs-btn-toolbar",hash:{},hashTypes:{},hashContexts:{},fn:this.program(11,d),inverse:this.noop,types:[],contexts:[],data:d},e=typeof f===j?f.call(a,g):f,b["bs-btn-toolbar"]||(e=k.call(a,e,g)),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-btn-group size="lg" contentBinding="optionsWithMeta" selectedBinding="selected"&#125;&#125;</code></pre>\n<p><em>Controller&#39;s code</em>:</p>\n<pre><code class="lang-javascript">\nShowcase.ShowComponentsButtonGroupController = Ember.Controller.extend({\n  optionsWithMeta: [\n    Ember.Object.create({title: &#39;Create&#39;, type: &#39;primary&#39;}),\n    Ember.Object.create(({title: &#39;Destroy&#39;, type: &#39;danger&#39;})\n  ]\n});</code></pre>\n'),l},useData:!0}),Ember.TEMPLATES["show_components/growl-notif"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push('<h1 id="growl-like-notifications">Growl like Notifications</h1>\n<p><em>Growl Notifications</em> is not a Bootstrap component but is mandatory for almost every web application.</p>\n<p><em>Growl Notifications</em> are just like the <em>Notification</em> component but messages that are rendered as small boxes on the right top of the screen, they fade in for a short period of time with a title, sub text and icon and then fade out.</p>\n<p>To use growl notifications, put somewhere in your <em>application</em> template the <em>bs-growl-notifications</em> component.</p>\n<pre><code class="lang-html">&#123;&#123;bs-growl-notifications&#125;&#125;</code></pre>\n<p>Then use the <em>GrowlNotificationManager</em> / <em>GNM</em> to push new notifications with a message and type.</p>\n<div class="bs-example">\n    '),d.buffer.push(f((b["bs-button"]||a&&a["bs-button"]||e).call(a,{name:"bs-button",hash:{title:"Push Info",clicked:"pushInfo"},hashTypes:{title:"STRING",clicked:"STRING"},hashContexts:{title:a,clicked:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(f((b["bs-button"]||a&&a["bs-button"]||e).call(a,{name:"bs-button",hash:{title:"Push Warning",clicked:"pushWarn"},hashTypes:{title:"STRING",clicked:"STRING"},hashContexts:{title:a,clicked:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(f((b["bs-button"]||a&&a["bs-button"]||e).call(a,{name:"bs-button",hash:{title:"Push Success",clicked:"pushSuccess"},hashTypes:{title:"STRING",clicked:"STRING"},hashContexts:{title:a,clicked:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(f((b["bs-button"]||a&&a["bs-button"]||e).call(a,{name:"bs-button",hash:{title:"Push Danger",clicked:"pushDanger"},hashTypes:{title:"STRING",clicked:"STRING"},hashContexts:{title:a,clicked:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<p>Controller code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsGrowlNotifController = Ember.Controller.extend({\n  pushInfo: function() {\n    Bootstrap.GNM.push(&#39;INFO!&#39;, &#39;Hello, this is just an info message.&#39;, &#39;info&#39;);\n  },\n  pushSuccess: function() {\n    Bootstrap.GNM.push(&#39;SUCCESS!&#39;, &#39;Successfully performed operation!&#39;, &#39;success&#39;);\n  },\n  pushWarn: function() {\n    Bootstrap.GNM.push(&#39;WARN!&#39;, &#39;Could not perform operation!&#39;, &#39;warning&#39;);\n  },\n  pushDanger: function() {\n    Bootstrap.GNM.push(&#39;Danger!&#39;, &#39;System is halting!&#39;, &#39;danger&#39;);\n  }\n});</code></pre>\n<p>You can control the visibility duration of each message by specifying the <em>showTime</em> property.</p>\n<h2 id="component-files">Component Files</h2>\n<ul>\n<li><em>css/bs-growl-notifications.min.css</em></li>\n<li><em>js/bs-growl-notifications.min.js</em></li>\n</ul>\n<h2 id="component-properties">Component Properties</h2>\n<div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n                <th>Default</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>showTime</td>\n                <td>A number in <em>ms</em> that defines how long the notification is displayed before it starts to fade out.</td>\n                <td>10 seconds</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'),g},useData:!0}),Ember.TEMPLATES["show_components/items_action_bar"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push('<h1 id="item-action-bar">Item action bar</h1>\n<p>When listing items that support selection, it usually make sense to perform some actions on the selected item(s).</p>\n<p>The Items action bar component make it possible to build an bar of buttons where each button visibility may behave differently according to the selection,</p>\n<p>For example an &#39;Edit&#39; button may be disabled unless 1 item is selected, or a &#39;Delete&#39; button may be enabled only\nwhen there is 1 or more items selected.</p>\n<p>In the template, only 1 expression is needed, the <code>content</code> property is expected to be an array of array, where each array represents a section in the action bar and contains objects that represent a button defintion in the bar, the <code>selectedItems</code> property is expected to be an array of the currently selected items on a list.</p>\n<div class="bs-example">\n    '),d.buffer.push(f((b["bs-items-action-bar"]||a&&a["bs-items-action-bar"]||e).call(a,{name:"bs-items-action-bar",hash:{selectedItemsBinding:"selection",contentBinding:"actionsInBar"},hashTypes:{selectedItemsBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedItemsBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    <br/>\n    "),d.buffer.push(f((b["bs-pills"]||a&&a["bs-pills"]||e).call(a,{name:"bs-pills",hash:{selectedBinding:"selection",contentBinding:"items"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<p>For the sake of simplicity in this example we use the <code>bs-pills</code> component to list items with signle itemselection support,\nbut this can be replaced with a table or any other visual form that supports selection.</p>\n<pre><code class="lang-html">&#123;&#123;bs-items-action-bar contentBinding="actionsInBar" selectedItemsBinding="selection"&#125;&#125;\n&#123;&#123;bs-pills contentBinding="items" selectedBinding="selection"&#125;&#125;</code></pre>\n<p>Per action defined in the controller (see below), it is possible to define whether the action should be disabled or not\nand what should happen when an enabled action is clicked,</p>\n<ul>\n<li>Implement the <code>disabled</code> function per action and return <code>true</code> if the action should be disabled, the method recieve the current selection so logic may take the selection into consideration whether the action should be disabled or not.</li>\n<li>Define <code>transitionTo</code> property with a route name if you want the action to transition to another route when pressed.</li>\n<li>Define the <code>clickActionName</code> property with an action name to be invoked on the controller when action is clicked.</li>\n</ul>\n<p>Controller&#39;s code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsItemsActionBarController = Ember.Controller.extend({\n  actionsInBar: [\n    [\n      {\n        title: &#39;To Alerts&#39;,\n        disabled: function(selection) {\n          var _ref;\n          if (selection.size &lt; 1 || (selection != null ? (_ref = selection[0]) != null ? _ref.title : void 0 : void 0) !== &#39;Alerts&#39;) {\n            return true;\n          }\n        },\n        transitionTo: &#39;show_components.alert&#39;\n      }, {\n        title: &#39;To Panels&#39;,\n        transitionTo: &#39;show_components.panel&#39;,\n        disabled: function(selection) {\n          var _ref;\n          if (selection.size &lt; 1 || (selection != null ? (_ref = selection[0]) != null ? _ref.title : void 0 : void 0) !== &#39;Panels&#39;) {\n            return true;\n          }\n        }\n      }\n    ], [\n      {\n        title: &#39;To Wizard&#39;,\n        disabled: function(selection) {\n          var _ref;\n          if (selection.size &lt; 1 || (selection != null ? (_ref = selection[0]) != null ? _ref.title : void 0 : void 0) !== &#39;Wizards&#39;) {\n            return true;\n          }\n        },\n        clickActionName: &#39;wizard&#39;\n      }\n    ]\n  ],\n  actions: {\n    wizard: function(selection) {\n      return alert("Wizard pressed!");\n    }\n  },\n  items: [\n    Ember.Object.create({\n      title: &#39;Alerts&#39;\n    }), Ember.Object.create({\n      title: &#39;Panels&#39;\n    }), Ember.Object.create({\n      title: &#39;Wizards&#39;\n    })\n  ]\n});</code></pre>\n'),g},useData:!0}),Ember.TEMPLATES["show_components/label"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push('<h1 id="label">Label</h1>\n<h2 id="basic">Basic</h2>\n<div class="bs-example">\n    <h4>Heading with label '),d.buffer.push(f((b["bs-label"]||a&&a["bs-label"]||e).call(a,{name:"bs-label",hash:{content:"Label"},hashTypes:{content:"STRING"},hashContexts:{content:a},types:[],contexts:[],data:d}))),d.buffer.push('</h3>\n</div>\n\n<pre><code class="lang-html">    &lt;h3&gt;Heading with label &#123;&#123;bs-label content="Label"&#125;&#125;&lt;/h3&gt;</code></pre>\n<h2 id="with-type">With Type</h2>\n<div class="bs-example">\n    <h3>Heading with <strong>danger</strong> '),d.buffer.push(f((b["bs-label"]||a&&a["bs-label"]||e).call(a,{name:"bs-label",hash:{type:"danger",content:"Careful!"},hashTypes:{type:"STRING",content:"STRING"},hashContexts:{type:a,content:a},types:[],contexts:[],data:d}))),d.buffer.push('</h3>\n</div>\n\n<pre><code class="lang-html">    &lt;h3&gt;Heading with &lt;strong&gt;danger&lt;/strong&gt; &#123;&#123;bs-label content="Careful!" type="danger"&#125;&#125;&lt;/h3&gt;</code></pre>\n<h2 id="component-properties">Component Properties</h2>\n<div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>content</td>\n                <td>string: the label content.</td>\n            </tr>\n            <tr>\n                <td>type</td>\n                <td>Label types: success | info | warning | danger</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'),g},useData:!0}),Ember.TEMPLATES["show_components/list-group"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push('<h1 id="list-group">List Group</h1>\n<blockquote>\n<p>List groups are a flexible and powerful component for displaying not only simple lists of elements, but complex ones with custom content.\n<small>By Bootstrap</small></p>\n</blockquote>\n<p>All list items are linkable and selection can easily be observed</p>\n<h2 id="simple">Simple</h2>\n<p>The most basic list group is simply an unordered list with list items.</p>\n<div class="bs-example">\n'),d.buffer.push(g((b["bs-list-group"]||a&&a["bs-list-group"]||f).call(a,{name:"bs-list-group",hash:{selectedBinding:"selected",contentBinding:"listSimple"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n\nSelected: "),e=b._triageMustache.call(a,"selected",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-list-group contentBinding="listSimple"&#125;&#125;</code></pre>\n<p>Controller&#39;s code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsListGroupController = Ember.Controller.extend({\n    listSimple: Ember.A([&#39;Cras justo odio&#39;, &#39;Dapibus ac facilisis in&#39;, &#39;Morbi leo risus&#39;])\n})</code></pre>\n<h2 id="badges">Badges</h2>\n<p>Each item in the list can have badge component that will automatically be positioned on the right.</p>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-list-group"]||a&&a["bs-list-group"]||f).call(a,{name:"bs-list-group",hash:{contentBinding:"listWithBadges"},hashTypes:{contentBinding:"STRING"},hashContexts:{contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-list-group contentBinding="listWithBadges"&#125;&#125;</code></pre>\n<p>Controller&#39;s code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsListGroupController = Ember.Controller.extend({\n  listWithBadges: Ember.A([\n    Ember.Object.create({title: &#39;Inbox&#39;, badge: &#39;45&#39;}),\n    Ember.Object.create({ title: &#39;Sent&#39;, badge: &#39;33&#39;})\n  ])\n});</code></pre>\n<h2 id="list-with-sub-text">List with Sub Text</h2>\n<p>Items can have a sub text enabled if an item metadata has the &#39;sub&#39; property.</p>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-list-group"]||a&&a["bs-list-group"]||f).call(a,{name:"bs-list-group",hash:{contentBinding:"listWithSub"},hashTypes:{contentBinding:"STRING"},hashContexts:{contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-list-group contentBinding="listWithSub"&#125;&#125;</code></pre>\n<p>Controller&#39;s code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsListGroupController = Ember.Controller.extend({\n  listWithSub: Ember.A([\n    Ember.Object.create({title: &#39;Inbox&#39;, badge: &#39;45&#39;}),\n    Ember.Object.create({ title: &#39;Sent&#39;, badge: &#39;33&#39;})\n  ])\n});</code></pre>\n'),h},useData:!0}),Ember.TEMPLATES["show_components/modal"]=Ember.HTMLBars.template({1:function(a,b,c,d){d.buffer.push("        <p>Modal content!</p>\n")},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push('<h1 id="modal">Modal</h1>\n<blockquote>\n<p>Modals are streamlined, but flexible, dialog prompts with the minimum required functionality and smart defaults.\n<small>by Bootstrap</small></p>\n</blockquote>\n<h2 id="blocked-modal">Blocked Modal</h2>\n<p>A rendered modal with header, body, and set of actions in the footer.</p>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-button"]||a&&a["bs-button"]||f).call(a,{name:"bs-button",hash:{clicked:"show",title:"Show Modal"},hashTypes:{clicked:"STRING",title:"STRING"},hashContexts:{clicked:a,title:a},types:[],contexts:[],data:d}))),d.buffer.push("\n"),e=(b["bs-modal"]||a&&a["bs-modal"]||f).call(a,{name:"bs-modal",hash:{title:"My Modal",footerButtonsBinding:"myModalButtons",fade:!0,name:"myModal"},hashTypes:{title:"STRING",footerButtonsBinding:"STRING",fade:"BOOLEAN",name:"STRING"},hashContexts:{title:a,footerButtonsBinding:a,fade:a,name:a},fn:this.program(1,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-button title="Show Modal" clicked="show"&#125;&#125;\n    &#123;&#123;#bs-modal name="myModal" fade=true footerButtonsBinding="myModalButtons" title="My Modal"&#125;&#125;\n        &lt;p&gt;Modal content!&lt;/p&gt;\n    &#123;&#123;/bs-modal&#125;&#125;</code></pre>\n<p><em>Controller&#39;s code</em>:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsModalController = Ember.Controller.extend({\n  myModalButtons: [\n      Ember.Object.create({title: &#39;Submit&#39;, clicked:"submit"})\n      Ember.Object.create({title: &#39;Cancel&#39;, clicked:"cancel", dismiss: &#39;modal&#39;})\n  ],\n\n  actions: {\n    //Submit the modal\n    submit: function() {\n      Bootstrap.NM.push(&#39;Successfully submitted modal&#39;, &#39;success&#39;);\n      return Bootstrap.ModalManager.hide(&#39;myModal&#39;);\n    },\n\n    //Cancel the modal, we don&#39;t need to hide the model manually because we set {..., dismiss: &#39;modal&#39;} on the button meta data\n    cancel: function() {\n      return Bootstrap.NM.push(&#39;Modal was cancelled&#39;, &#39;info&#39;);\n    },\n\n    //Show the modal\n    show: function() {\n      return Bootstrap.ModalManager.show(&#39;myModal&#39;);\n    }\n  }\n});</code></pre>\n<p>NOTE: The buttons defined in the array object can contain the same attributes as the button component. For example: for a &#39;danger&#39; button, add "type=&#39;danger&#39;" to the object defining the button.</p>\n<h2 id="confirmation-modal">Confirmation Modal</h2>\n<p>For a simple confirmation modal, you can simply invoke <code>Bootstrap.ModalManager.confirm(this);</code></p>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-button"]||a&&a["bs-button"]||f).call(a,{name:"bs-button",hash:{clicked:"confirm",title:"Delete"},hashTypes:{clicked:"STRING",title:"STRING"},hashContexts:{clicked:a,title:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-button title="Delete" clicked="confirm"&#125;&#125;</code></pre>\n<p><em>Controller&#39;s code</em>:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsModalController = Ember.Controller.extend({\n    confirm: {\n        confirm: {\n            Bootstrap.ModalManager.confirm(@);\n        },\n        //invoked when user press "confirm"\n        modalConfirmed: {\n            Bootstrap.NM.push(&#39;Confirmed!&#39;, &#39;success&#39;)\n        },\n        //invoked when user press "cancel"\n        modalCanceled: {\n            Bootstrap.NM.push(&#39;Cancelled!&#39;, &#39;info&#39;)\n        }\n    }\n})</code></pre>\n<p>The <code>Bootstrap.ModalManager.confirm</code> method accept the following parameters:</p>\n<div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n                <th>Optional?</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>controller</td>\n                <td>A reference to the controller that the confirm/cancel actions will be triggered on</td>\n                <td>no</td>\n            </tr>\n            <tr>\n                <td>title</td>\n                <td>The title of the modal that.</td>\n                <td>yes</td>\n            </tr>\n            <tr>\n                <td>message</td>\n                <td>The body text of the modal.</td>\n                <td>yes</td>\n            </tr>\n            <tr>\n                <td>confirmButtonTitle</td>\n                <td>The title of the confirm button</td>\n                <td>yes</td>\n            </tr>\n            <tr>\n                <td>cancelButtonTitle</td>\n                <td>The title of the cancel button</td>\n                <td>yes</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n<h2 id="programatically-modal-creation">Programatically Modal Creation</h2>\n<p>It is also possible to programatically create a modal, this approach is useful if the modal contains a lot of elements and it makes sense to push the modal elements into the DOM programatically and totally destroy the modal when it is closed.</p>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-button"]||a&&a["bs-button"]||f).call(a,{name:"bs-button",hash:{clicked:"createModalProgramatically",title:"Create Modal"},hashTypes:{clicked:"STRING",title:"STRING"},hashContexts:{clicked:a,title:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">//we only render a button which will programatically create the modal\n&#123;&#123;bs-button title="Create Modal" clicked="createModalProgramatically"&#125;&#125;</code></pre>\n<p><em>Controller&#39;s code</em>:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsModalController = Ember.Controller.extend({\n  manualButtons: [\n      Ember.Object.create({title: &#39;Submit&#39;, clicked:"submitManual"})\n      Ember.Object.create({title: &#39;Cancel&#39;, dismiss: &#39;modal&#39;})\n  ],\n\n  actions: {\n    submitManual: function() {\n      Bootstrap.NM.push(&#39;Modal destroyed!&#39;, &#39;success&#39;);\n      return Bootstrap.ModalManager.close(&#39;manualModal&#39;);\n    },\n    createModalProgramatically: function() {\n      //@property {string} The name of the modal, required later to close the modal (see submitManual function above)\n      //@property {string} The title of the modal.\n      //@property {string} The template name to render within the modal body, a View class may also be specified.\n      //@property {array} Array of Button meta data\n      //@property {object} The controller instance that instantiate the modal.\n      Bootstrap.ModalManager.open(&#39;manualModal&#39;, &#39;Hello&#39;, &#39;demo-template&#39;, this.manualButtons, this);\n    }\n  }\n});</code></pre>\n'),h},useData:!0}),Ember.TEMPLATES["show_components/notifications"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push('<h1 id="notifications">Notifications</h1>\n<p><em>Notifications</em> is not a Bootstrap component but is mandatory for almost every web application.</p>\n<p><em>Notifications</em> are messages that are rendered as <em>Alerts</em>, they fade in for a short period of time with some message and type and then they fade out.</p>\n<p>Notifications are pushed into an array, so different parts of the application may push notifications to the user\nand each will be displayed one after another.</p>\n<p>To use notifications, put somewhere in your <em>application</em> template the <em>bs-notifications</em> component.</p>\n<pre><code class="lang-html">&#123;&#123;bs-notifications style="z-index: 1000; position: fixed; width: 50%; left: 0; right: 0; margin-left: auto; margin-right: auto; margin-top: 50px;"&#125;&#125;</code></pre>\n<p>How you style the component is up to you, this is just an example for centralizing the notifications on the screen.</p>\n<p>Then use the <em>NotificationManager</em> / <em>NM</em> to push new notifications with a message and type.</p>\n<div class="bs-example" >\n    '),d.buffer.push(f((b["bs-button"]||a&&a["bs-button"]||e).call(a,{name:"bs-button",hash:{title:"Push Info",clicked:"pushInfo",type:"info"},hashTypes:{title:"STRING",clicked:"STRING",type:"STRING"},hashContexts:{title:a,clicked:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(f((b["bs-button"]||a&&a["bs-button"]||e).call(a,{name:"bs-button",hash:{title:"Push Warning",clicked:"pushWarn",type:"warning"},hashTypes:{title:"STRING",clicked:"STRING",type:"STRING"},hashContexts:{title:a,clicked:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(f((b["bs-button"]||a&&a["bs-button"]||e).call(a,{name:"bs-button",hash:{title:"Push Success",clicked:"pushSuccess",type:"success"},hashTypes:{title:"STRING",clicked:"STRING",type:"STRING"},hashContexts:{title:a,clicked:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(f((b["bs-button"]||a&&a["bs-button"]||e).call(a,{name:"bs-button",hash:{title:"Push Danger",clicked:"pushDanger",type:"danger"},hashTypes:{title:"STRING",clicked:"STRING",type:"STRING"},hashContexts:{title:a,clicked:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<p>Controller code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsNotificationsController = Ember.Controller.extend({\n  pushInfo: function() {\n    return Bootstrap.NM.push(&#39;Hello, this is just an info message.&#39;, &#39;info&#39;);\n  },\n  pushWarn: function() {\n    return Bootstrap.NM.push(&#39;Could not perform operation!&#39;, &#39;warning&#39;);\n  },\n  pushSuccess: function() {\n    return Bootstrap.NM.push(&#39;Successfully performed operation!&#39;, &#39;success&#39;);\n  },\n  pushDanger: function() {\n    return Bootstrap.NM.push(&#39;Danger! system is halting!&#39;, &#39;danger&#39;);\n  }\n});</code></pre>\n<p>During fade out, If user hover with the mouse in the notification area, it will cancel the fade in animation so the user can have more time to read the message, moving the mouse out will retrigger the fade out.</p>\n<p>You can control the duration messages are displayed, the fade out and fade in time by providing properties for each, for more info see the properties options below.</p>\n<h2 id="component-properties">Component Properties</h2>\n<div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>showTime</td>\n                <td>A number in <em>ms</em> that defines how long the notification is displayed before it starts to fade out.</td>\n            </tr>\n            <tr>\n                <td>fadeInTime</td>\n                <td>A number in <em>ms</em> that defines how long it takes a notification to fades in.</td>\n            </tr>\n            <tr>\n                <td>fadeOutTime</td>\n                <td>A number in <em>ms</em> that defines how long it takes a notification to fade out.</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'),
g},useData:!0}),Ember.TEMPLATES["show_components/page-header"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push('<h1 id="page-header">Page Header</h1>\n<p><br/></p>\n<blockquote>\n<p>A simple shell for an h1 to appropriately space out and segment sections of content on a page. It can utilize the h1&#39;s default small element, as well as most other components (with additional styles).\n<small>By Bootstrap</small></p>\n</blockquote>\n<div class="bs-example">\n    '),d.buffer.push(f((b["bs-page-header"]||a&&a["bs-page-header"]||e).call(a,{name:"bs-page-header",hash:{sub:"Subtext for header",title:"Example page header"},hashTypes:{sub:"STRING",title:"STRING"},hashContexts:{sub:a,title:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-page-header title="Example page header" sub="Subtext for header"&#125;&#125;</code></pre>\n'),g},useData:!0}),Ember.TEMPLATES["show_components/panel"]=Ember.HTMLBars.template({1:function(a,b,c,d){d.buffer.push("        <p>Panel content goes here...!</p>\n")},3:function(a,b,c,d){d.buffer.push("        <p>Panel content.</p>\n")},5:function(a,b,c,d){d.buffer.push("    <p>Panel content goes here...!</p>\n")},7:function(a,b,c,d){d.buffer.push("    <p>IM OPEN NOW!</p>\n")},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g="";return d.buffer.push('<h1 id="panel">Panel</h1>\n<blockquote>\n<p>While not always necessary, sometimes you need to put your DOM in a box. For those situations, try the panel component.\n<small>By Bootstrap</small></p>\n</blockquote>\n<h2 id="basic">Basic</h2>\n<div class="bs-example">\n'),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{footer:"Panel Footer",heading:"Simple Panel"},hashTypes:{footer:"STRING",heading:"STRING"},hashContexts:{footer:a,heading:a},fn:this.program(1,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-panel heading="Simple Panel" footer="Panel Footer"&#125;&#125;\n    &lt;p&gt;Panel content goes here...!&lt;/p&gt;\n&#123;&#123;/bs-panel&#125;&#125;</code></pre>\n<h2 id="contextual-alternatives">Contextual alternatives</h2>\n<blockquote>\n<p>Like other components, easily make a panel more meaningful to a particular context by adding any of the contextual state classes.\n<small>By Bootstrap</small></p>\n</blockquote>\n<div class="bs-example">\n'),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{type:"primary",heading:"Primary Panel"},hashTypes:{type:"STRING",heading:"STRING"},hashContexts:{type:a,heading:a},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{type:"success",heading:"Success Panel"},hashTypes:{type:"STRING",heading:"STRING"},hashContexts:{type:a,heading:a},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{type:"info",heading:"Info Panel"},hashTypes:{type:"STRING",heading:"STRING"},hashContexts:{type:a,heading:a},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{type:"warning",heading:"Warning Panel"},hashTypes:{type:"STRING",heading:"STRING"},hashContexts:{type:a,heading:a},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{type:"danger",heading:"Danger Panel"},hashTypes:{type:"STRING",heading:"STRING"},hashContexts:{type:a,heading:a},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">    &#123;&#123;#bs-panel heading="Primary Panel" type="primary"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel&#125;&#125;\n    &#123;&#123;#bs-panel heading="Success Panel" type="success"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel&#125;&#125;\n    &#123;&#123;#bs-panel heading="Info Panel" type="info"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel&#125;&#125;\n    &#123;&#123;#bs-panel heading="Warning Panel" type="warning"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel}}\n    &#123;&#123;#bs-panel heading="Danger Panel" type="danger"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel&#125;&#125;</code></pre>\n<h2 id="dismissable-panels">Dismissable Panels</h2>\n<p>This goes beyond what Bootstrap offers and let you create a closable panels by adding the <code>dismiss=true</code> property</p>\n<div class="bs-example">\n'),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{onClose:"panelClosed",dismiss:!0,type:"primary",heading:"Primary Panel"},hashTypes:{onClose:"STRING",dismiss:"BOOLEAN",type:"STRING",heading:"STRING"},hashContexts:{onClose:a,dismiss:a,type:a,heading:a},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n\n<pre><code class="lang-html">&#123;&#123;#bs-panel heading="Primary Panel" type="primary" dismiss=true onClose="panelClosed"&#125;&#125;\n    &lt;p&gt;Panel content.&lt;/p&gt;\n&#123;&#123;/bs-panel&#125;&#125;</code></pre>\n<h2 id="clickable-panels">Clickable Panels</h2>\n<p>Panels can also be clickable, the click is propagated to the <em>current controller</em> via the <em>clicked</em> property</p>\n<div class="bs-example">\n'),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{clicked:"panelClicked",type:"primary",heading:"Primary Panel"},hashTypes:{clicked:"STRING",type:"STRING",heading:"STRING"},hashContexts:{clicked:a,type:a,heading:a},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-panel heading="Primary Panel" type="primary" clicked="panelClicked"&#125;&#125;\n    &lt;p&gt;Panel content.&lt;/p&gt;\n&#123;&#123;/bs-panel&#125;&#125;</code></pre>\n<h2 id="collapsible-panels">Collapsible Panels</h2>\n<p>Panels can be collapsible, to enable collapsible support set <code>collapsible=true</code> on the component tag:</p>\n<div class="bs-example">\n'),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{footer:"Panel Footer",dismiss:!0,collapsible:!0,heading:"Simple Panel"},hashTypes:{footer:"STRING",dismiss:"BOOLEAN",collapsible:"BOOLEAN",heading:"STRING"},hashContexts:{footer:a,dismiss:a,collapsible:a,heading:a},fn:this.program(5,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-panel heading="Simple Panel" collapsible=true dismiss=true footer="Panel Footer"&#125;&#125;\n    &lt;p&gt;Panel content goes here...!&lt;/p&gt;\n&#123;&#123;/bs-panel&#125;&#125;</code></pre>\n<p>Collapsible panels can also be closed by default by setting <code>open=false</code>.</p>\n<div class="bs-example">\n'),e=(b["bs-panel"]||a&&a["bs-panel"]||f).call(a,{name:"bs-panel",hash:{open:!1,dismiss:!0,collapsible:!0,heading:"Open me!"},hashTypes:{open:"BOOLEAN",dismiss:"BOOLEAN",collapsible:"BOOLEAN",heading:"STRING"},hashContexts:{open:a,dismiss:a,collapsible:a,heading:a},fn:this.program(7,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-panel heading="Simple Panel" collapsible=true dismiss=true footer="Panel Footer"&#125;&#125;\n    &lt;p&gt;Panel content goes here...!&lt;/p&gt;\n&#123;&#123;/bs-panel&#125;&#125;</code></pre>\n'),g},useData:!0}),Ember.TEMPLATES["show_components/pills"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push('<h1 id="pills">Pills</h1>\n<p><a href="http://getbootstrap.com/components/#nav-pills">Pills</a> are a button-like navigation style,</p>\n<p>Bootstrap doesn&#39;t dictate nor assist with how you respond when an item is selected in the Pills navigation,\nBut using <em>bs-pills</em> helps by making the navigation more interactive by providing selection bindings and styling the\nactive element, see examples below.</p>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-pills"]||a&&a["bs-pills"]||f).call(a,{name:"bs-pills",hash:{selectedBinding:"selected",contentBinding:"content"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    Selected: "),e=b._triageMustache.call(a,"selected",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">\n&#123;&#123;bs-pills contentBinding="content" selectedBinding="selected"&#125;&#125;\n\nSelected: &#123;&#123;selected&#125;&#125;</code></pre>\n<p><em>content</em> and <em>selected</em> are properties in the current <em>controller</em></p>\n<ul>\n<li>The <em>content</em> controller property is an array of strings where each string is rendered as a possible item selection.</li>\n<li>When an item selection is changed, the <em>selected</em> property in the current <em>controller</em> will be set with the value of the selected item.</li>\n</ul>\n<p>Here&#39;s the controller sample code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsPillsController = Ember.Controller.extend({\n  content: [&#39;Home&#39;, &#39;Profile&#39;, &#39;Messages&#39;],\n  contentChanged: (function() {\n    return console.log("Selection has changed to: " + (this.get(&#39;selected&#39;)));\n  }).observes(&#39;selected&#39;)\n});</code></pre>\n<h1 id="stacked">Stacked</h1>\n<blockquote>\n<p>Pills are also vertically stackable. Just add `stacked=true``</p>\n</blockquote>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-pills"]||a&&a["bs-pills"]||f).call(a,{name:"bs-pills",hash:{style:"max-width: 300px;",stacked:!0,selectedBinding:"selected",contentBinding:"content"},hashTypes:{style:"STRING",stacked:"BOOLEAN",selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{style:a,stacked:a,selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-pills contentBinding="content" selectedBinding="selected" stacked=true style="max-width: 300px;"&#125;&#125;</code></pre>\n<h1 id="justified">Justified</h1>\n<blockquote>\n<p>Easily make tabs or pills equal widths of their parent with setting <code>justified=true</code></p>\n</blockquote>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-pills"]||a&&a["bs-pills"]||f).call(a,{name:"bs-pills",hash:{justified:!0,selectedBinding:"selected",contentBinding:"content"},hashTypes:{justified:"BOOLEAN",selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{justified:a,selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-pills contentBinding="content" selectedBinding="selected" justified=true&#125;&#125;</code></pre>\n<h1 id="disabled-links">Disabled links</h1>\n<p>Bootstrap doesn&#39;t stop the propagation of the redirection of disabled links for you:</p>\n<blockquote>\n<p> This class will only change the <em>anchor</em>&#39;s appearance, not its functionality. Use custom JavaScript to disable links here.\n<small><a href="http://getbootstrap.com/components/#nav-disabled-links">By Bootstrap</a></small></p>\n</blockquote>\n<p>But using <em>bs-pills</em> ease your pain by giving you the opportunity to bind the disable state of each item by providing extra metadata per item, clicking a disabled item disables the links too.</p>\n<p>To define links (items) as disabed, you need to provide extra metadata per defined item in the <em>contentBinding</em> property.</p>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-pills"]||a&&a["bs-pills"]||f).call(a,{name:"bs-pills",hash:{selectedBinding:"selected1",contentBinding:"content1"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(g((b["bs-button"]||a&&a["bs-button"]||f).call(a,{name:"bs-button",hash:{title:"Disable Home",clicked:"disableHome"},hashTypes:{title:"STRING",clicked:"STRING"},hashContexts:{title:a,clicked:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-pills contentBinding="content" selectedBinding="selected"&#125;&#125;\n&#123;&#123;bs-button clicked="disableHome" content="Disable Home"&#125;&#125;</code></pre>\n<p>Controller sample code:</p>\n<pre><code class="lang-javascript">\nShowcase.ShowComponentsPillsController = Ember.Controller.extend({\n  init: function() {\n    this._super();\n    this.set(&#39;content&#39;, Ember.A([\n      Ember.Object.create({title: &#39;Home&#39;,disabled: false}),\n      Ember.Object.create({title: &#39;Admin&#39;,disabled: true})\n    ]));\n    this.set(&#39;selected&#39;, this.get(&#39;content&#39;).objectAt(0));\n  },\n\n  disableHome: function() {\n    this.get(&#39;content&#39;).objectAt(0).set(&#39;disabled&#39;, true);\n  }\n});</code></pre>\n'),h},useData:!0}),Ember.TEMPLATES["show_components/popover"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push('<h1 id="popover-tooltips">Popover &amp; Tooltips</h1>\n<h2 id="setup">Setup</h2>\n<p>For Popover support, it is required to adapt the <em>application route</em> and add a named outlet to your main template and reference a controller that extends from <code>Bootstrap.TooltipBoxController</code></p>\n<pre><code class="lang-javascript">//Create some controller in your app that references _Bootstrap.TooltipBoxController_\nApp.TooltipBoxController = Bootstrap.TooltipBoxController\n\n//Application route\nApp.ApplicationRoute = Ember.Route.extend({\n    renderTemplate: function() {\n        // Render default outlet\n        this.render();\n        // render extra outlets\n        var controller = this.controllerFor(&#39;tooltip-box&#39;);\n        this.render("bs-tooltip-box", {\n            outlet: "bs-tooltip-box",\n            controller: controller,\n            into: "application" // important when using at root level\n        });\n    }\n});</code></pre>\n<h2 id="tooltips">Tooltips</h2>\n<h3 id="simple-content">Simple content</h3>\n<div class="bs-example">\n<p class="muted" style="margin-bottom: 0;">Here is <a href="#" '),d.buffer.push(f((b["bs-bind-tooltip"]||a&&a["bs-bind-tooltip"]||e).call(a,{name:"bs-bind-tooltip",hash:{content:"A tooltip!"},hashTypes:{content:"STRING"},hashContexts:{content:a},types:[],contexts:[],data:d}))),d.buffer.push('>a very</a> link with a tooltip,.\n    You can mix as many <a href="#" '),d.buffer.push(f((b["bs-bind-tooltip"]||a&&a["bs-bind-tooltip"]||e).call(a,{name:"bs-bind-tooltip",hash:{title:"Another tooltip!"},hashTypes:{title:"STRING"},hashContexts:{title:a},types:[],contexts:[],data:d}))),d.buffer.push('>tooltips</a> as you wish.\n</p>\n</div>\n\n<pre><code class="lang-html">&lt;p class="muted" style="margin-bottom: 0;"&gt;\n    Here is &lt;a href="#" &#123;&#123;bs-bind-tooltip content="A tooltip!"&#125;&#125;&gt;a very&lt;/a&gt; link with a tooltip,.\n    You can mix as many &lt;a href="#" &#123;&#123;bs-bind-tooltip title="Another tooltip!"&#125;&#125;&gt;tooltips&lt;/a&gt; as you wish.\n&lt;/p&gt;</code></pre>\n<h3 id="bindings-sticky">Bindings &amp; Sticky</h3>\n<p>You can bind the value of the tooltip to an object and make the tooltip sticky by:</p>\n<div class="bs-example">\n    <a href="#" '),d.buffer.push(f((b["bs-bind-tooltip"]||a&&a["bs-bind-tooltip"]||e).call(a,"testObject.sticky",{name:"bs-bind-tooltip",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}))),d.buffer.push('>Hover me for a sticky tooltip!</a>\n</div>\n\n<p>In template:</p>\n<pre><code class="lang-html">&lt;a href="#" &#123;&#123;bs-bind-tooltip testObject.sticky&#125;&#125;&gt;Hover me for a sticky tooltip!&lt;/a&gt;</code></pre>\n<p>In controller:</p>\n<pre><code class="lang-javascript">    stickyTooltip: Ember.Object.createWithMixins({\n        popover: (function() {\n          return Ember.Object.create({\n            user: this,\n            content: &#39;know this is a sticky tooltip! You can hover over it.&#39;,\n            trigger: &#39;hover&#39;,\n            sticky: true\n          });\n        }).property()\n      })</code></pre>\n<h2 id="popovers">Popovers</h2>\n<h3 id="examples">Examples</h3>\n<p>Here are some examples for popovers:</p>\n<div class="bs-example">\n    <ul class="list-group" style="width:250px">\n        <li class="list-group-item" '),d.buffer.push(f((b["bs-bind-popover"]||a&&a["bs-bind-popover"]||e).call(a,"hoverPop",{name:"bs-bind-popover",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}))),d.buffer.push('>\n                 Hover for a sticky popup\n        </li>\n        <li class="list-group-item" '),d.buffer.push(f((b["bs-bind-popover"]||a&&a["bs-bind-popover"]||e).call(a,"clickPop",{name:"bs-bind-popover",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}))),d.buffer.push('>\n                 Click for a popup\n        </li>\n        <li class="list-group-item" '),d.buffer.push(f((b["bs-bind-popover"]||a&&a["bs-bind-popover"]||e).call(a,"templPop",{name:"bs-bind-popover",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}))),d.buffer.push('>\n                 Click for a popup with template\n        </li>\n    </ul>\n</div>\n\n<p>In template:</p>\n<pre><code class="lang-html">&lt;ul class="list-group" style="width:250px"&gt;\n    &lt;li class="list-group-item" &#123;&#123;bs-bind-popover hoverPop&#125;&#125;&gt;\n             Hover for a sticky popup\n    &lt;/li&gt;\n    &lt;li class="list-group-item" &#123;&#123;bs-bind-popover clickPop&#125;&#125;&gt;\n             Click for a popup\n    &lt;/li&gt;\n    &lt;li class="list-group-item" &#123;&#123;bs-bind-popover templPop&#125;&#125;&gt;\n             Click for a popup with template\n    &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<p>In controller:</p>\n<pre><code class="lang-javascript">  hoverPop: Ember.Object.create({\n    title: "I&#39;m a title!",\n    content: "And i&#39;m a content!",\n    trigger: "hover",\n    placement: "right",\n    sticky: true\n  }),\n\n  clickPop: Ember.Object.create({\n    title: "Clickable!",\n    content: "This is a clickable popover",\n    placement: "left"\n  }),\n\n  templPop: Ember.Object.create({\n      firstName: &#39;numbers&#39;,\n      title: &#39;Popover with Template&#39;,\n      template: &#39;numbers:&lt;ul&gt;&#39; +\n              &#39;&#123;&#123;#each val in content.numbers&#125;&#125;&#39; +\n              &#39;   &lt;li&gt;&#123;&#123;val&#125;&#125;&lt;/li&gt;&#39; + &#39;&#123;&#123;/each&#125;&#125;&#39; +\n              &#39;&lt;/ul&gt;&#39;,\n      content: {\n        numbers: [1, 2, 3]\n      }\n  })</code></pre>\n<h2 id="object-options">Object Options</h2>\n<p>Following are the options that back a tooltip/popover entry:</p>\n<div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 100px;">Property Name</th>\n                <th style="width: 100px;">Type</th>\n                <th style="width: 50px;">Default</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>html</td>\n                <td>boolean</td>\n                <td>false</td>\n                <td>Insert HTML into the popover.</td>\n            </tr>\n            <tr>\n                <td>placement</td>\n                <td>string | function</td>\n                <td>&#39;right&#39;</td>\n                <td>how to position the popover - top | bottom | left | right | auto.<br> When "auto" is specified, it will dynamically reorient the popover. For example, if placement is "auto left", the popover will display to the left when possible, otherwise it will display right.</td>\n            </tr>\n            <tr>\n                <td>trigger</td>\n                <td>string</td>\n                <td>&#39;click&#39; for popover| &#39;hover&#39; for tooltip</td>\n                <td>how popover is triggered - click | hover | focus | manual</td>\n            </tr>\n            <tr>\n                <td>sticky</td>\n                <td>boolean</td>\n                <td>false</td>\n                <td>To be used when trigger is &#39;hover&#39;.\n                    When the tooltip appears you have 100ms to hover over it and only after you leave the popover/tooltip it will disappear</td>\n            </tr>\n            <tr>\n                <td>show</td>\n                <td>boolean</td>\n                <td>false</td>\n                <td>To be used when trigger is &#39;manual&#39;.\n                    Will show the tip when true, hide when false.\n                    The property will be observed for changes with "addObserver"\n                </td>\n            </tr>\n            <tr>\n                <td>title</td>\n                <td>string</td>\n                <td>&#39;&#39;</td>\n                <td></td>\n            </tr>\n            <tr>\n                <td>content</td>\n                <td>string | function</td>\n                <td>&#39;&#39;</td>\n                <td></td>\n            </tr>\n            <tr>\n                <td>template</td>\n                <td>string</td>\n                <td>null</td>\n                <td>Use this template to display. The context will be the popover/tooltip. The data is available in content.*</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n\n'),g},useData:!0}),Ember.TEMPLATES["show_components/progressbar"]=Ember.HTMLBars.template({1:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push("        "),d.buffer.push(f((b["bs-progressbar"]||a&&a["bs-progressbar"]||e).call(a,{name:"bs-progressbar",hash:{progress:"35",type:"success"},hashTypes:{progress:"STRING",type:"STRING"},hashContexts:{progress:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push("\n        "),d.buffer.push(f((b["bs-progressbar"]||a&&a["bs-progressbar"]||e).call(a,{name:"bs-progressbar",hash:{progress:"20",type:"warning"},hashTypes:{progress:"STRING",type:"STRING"},hashContexts:{progress:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push("\n        "),d.buffer.push(f((b["bs-progressbar"]||a&&a["bs-progressbar"]||e).call(a,{name:"bs-progressbar",hash:{progress:"10",type:"danger"},hashTypes:{progress:"STRING",type:"STRING"},hashContexts:{progress:a,type:a},types:[],contexts:[],data:d}))),d.buffer.push("\n"),g},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f,g,h=b.helperMissing,i=this.escapeExpression,j="function",k=b.blockHelperMissing,l="";return d.buffer.push('<h1 id="progress-bar">Progress Bar</h1>\n<blockquote>\n<p>Provide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars.\n<small>By Bootstrap</small></p>\n</blockquote>\n<h2 id="basic-usage">Basic usage</h2>\n<div class="bs-example">\n    '),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{progress:60},hashTypes:{progress:"NUMBER"},hashContexts:{progress:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-progress progress=60&#125;&#125;</code></pre>\n<p><strong>Simple as that! a single short line, compared to <a href="http://getbootstrap.com/components/#progress">Bootstarp Tags</a> 5 long lines that\nproduces the same result.</strong></p>\n<p>The progress component respects all <em>aria</em> tags mentioned in <em>Bootstrap</em> documentation.</p>\n<hr>\n<blockquote>\n<p>Progress bars use some of the same button and alert classes for consistent styles\n<small>By Bootstrap</small></p>\n</blockquote>\n<div class="bs-example">\n    '),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{type:"success",progress:40},hashTypes:{type:"STRING",progress:"NUMBER"},hashContexts:{type:a,progress:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{type:"info",progress:20},hashTypes:{type:"STRING",progress:"NUMBER"},hashContexts:{type:a,progress:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{type:"warning",progress:60},hashTypes:{type:"STRING",progress:"NUMBER"},hashContexts:{type:a,progress:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{type:"danger",progress:80},hashTypes:{type:"STRING",progress:"NUMBER"},hashContexts:{type:a,progress:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">    &#123;&#123;bs-progress progress=40 type="success"&#125;&#125;\n    &#123;&#123;bs-progress progress=20 type="info"&#125;&#125;\n    &#123;&#123;bs-progress progress=60 type="warning"&#125;&#125;\n    &#123;&#123;bs-progress progress=80 type="danger"&#125;&#125;</code></pre>\n<hr>\n<p>The <em>progress</em> property can be bound to a controller property:</p>\n<div class="bs-example">\n    '),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{progressBinding:"prog"},hashTypes:{progressBinding:"STRING"},hashContexts:{progressBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(i((b["bs-button"]||a&&a["bs-button"]||h).call(a,{name:"bs-button",hash:{title:"Increment!",clicked:"increment"},hashTypes:{title:"STRING",clicked:"STRING"},hashContexts:{title:a,clicked:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-progress progressBinding="prog"&#125;&#125;\n    &#123;&#123;bs-button clicked="increment" content="Increment!"&#125;&#125;</code></pre>\n<p>Controller sample code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsProgressbarController = Ember.Controller.extend({\n  prog: 0,\n  incrementBy: 20,\n  increment: function() {\n    if (this.prog &lt; 100) {\n      return this.incrementProperty("prog", this.incrementBy);\n    } else {\n      return this.set("prog", this.incrementBy);\n    }\n  }\n});</code></pre>\n<h2 id="striped">Striped</h2>\n<blockquote>\n<p>Uses a gradient to create a striped effect. Not available in IE8.\n<small>By Bootstrap</small></p>\n</blockquote>\n<p>This is simply done by setting the <em>stripped=true</em> property.</p>\n<div class="bs-example">\n    '),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{stripped:!0,type:"success",progress:40},hashTypes:{stripped:"BOOLEAN",type:"STRING",progress:"NUMBER"},hashContexts:{stripped:a,type:a,progress:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{stripped:!0,type:"info",progress:20},hashTypes:{stripped:"BOOLEAN",type:"STRING",progress:"NUMBER"},hashContexts:{stripped:a,type:a,progress:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{stripped:!0,type:"warning",progress:60},hashTypes:{stripped:"BOOLEAN",type:"STRING",progress:"NUMBER"},hashContexts:{stripped:a,type:a,progress:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{stripped:!0,type:"danger",progress:80},hashTypes:{stripped:"BOOLEAN",type:"STRING",progress:"NUMBER"},hashContexts:{stripped:a,type:a,progress:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n\n<h2 id="animated">Animated</h2>\n<p>In addition to <em>stripped=true</em>, add <em>animated=true</em> property to animate the stripes right to left.</p>\n<div class="bs-example">\n    '),d.buffer.push(i((b["bs-progress"]||a&&a["bs-progress"]||h).call(a,{name:"bs-progress",hash:{animated:!0,stripped:!0,progress:45},hashTypes:{animated:"BOOLEAN",stripped:"BOOLEAN",progress:"NUMBER"},hashContexts:{animated:a,stripped:a,progress:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-progress progress=45 stripped=true animated=true&#125;&#125;</code></pre>\n<h2 id="stacked">Stacked</h2>\n<p>Multiple bars can be placed into the same <em>bs-progress</em> to stack them:</p>\n<div class="bs-example">\n'),f=null!=(f=b["bs-progress"]||(null!=a?a["bs-progress"]:a))?f:h,g={name:"bs-progress",hash:{},hashTypes:{},hashContexts:{},fn:this.program(1,d),inverse:this.noop,types:[],contexts:[],data:d},e=typeof f===j?f.call(a,g):f,b["bs-progress"]||(e=k.call(a,e,g)),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">    &#123;&#123;#bs-progress&#125;&#125;\n        &#123;&#123;bs-progressbar type="success" progress="35"&#125;&#125;\n        &#123;&#123;bs-progressbar type="warning" progress="20"&#125;&#125;\n        &#123;&#123;bs-progressbar type="danger" progress="10"&#125;&#125;\n    &#123;&#123;/bs-progress&#125;&#125;</code></pre>\n'),l},useData:!0}),Ember.TEMPLATES["show_components/tabs-panes"]=Ember.HTMLBars.template({1:function(a,b,c,d){d.buffer.push("Tab Component")},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push('<h1 id="tab-panes">Tab Panes</h1>\n<p>Defining '),e=(b["link-to"]||a&&a["link-to"]||f).call(a,"show_components.tabs",{name:"link-to",hash:{},hashTypes:{},hashContexts:{},fn:this.program(1,d),inverse:this.noop,types:["STRING"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push(' covers the Tabs rendering and help you to interact with the selected tab. But usually some content should be rendered as a response for a tab click right?</p>\n<p>This is where <em>Tab Panes</em> come into play, a tab pane is the content area of each rendered tab, when a tab is selected, the corresponding <em>tab pane</em> becomes visible, see below for the possible options.</p>\n<p>Tab Panes expects a <code>contentBinding</code> property just like the <em>bs-tabs</em> component, the <em>Tabs Panes</em> component also must be aware of the <em>bs-tabs</em> component it is bound to by specifying the <em>items-id</em> property set to the <em>id</em> of the corresponding <em>bs-tabs</em></p>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-tabs"]||a&&a["bs-tabs"]||f).call(a,{name:"bs-tabs",hash:{"default":"Foo",contentBinding:"tabsMeta",id:"tabs1"},hashTypes:{"default":"STRING",contentBinding:"STRING",id:"STRING"},hashContexts:{"default":a,contentBinding:a,id:a},types:[],contexts:[],data:d}))),d.buffer.push("\n    "),d.buffer.push(g((b["bs-tabs-panes"]||a&&a["bs-tabs-panes"]||f).call(a,{name:"bs-tabs-panes",hash:{contentBinding:"tabsMeta","items-id":"tabs1"},hashTypes:{contentBinding:"STRING","items-id":"STRING"},hashContexts:{contentBinding:a,"items-id":a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-tabs id="tabs1" contentBinding="tabsMeta" default="Foo"&#125;&#125;\n&#123;&#123;bs-tabs-panes items-id="tabs1" contentBinding="tabsMeta"&#125;&#125;</code></pre>\n<ul>\n<li>An <code>id</code> property is required for the <em>bs-tabs</em>.</li>\n<li>The <em>bs-tabs-panes</em> generates a tab pane per element in the <em>content</em> array.</li>\n<li>The <code>items-id</code> property must refer to the <code>id</code> of the <code>bs-tabs</code> component.</li>\n<li>If you like one tab to be activated by default, set the <code>default</code> property of the <em>bs-tabs</em> component to a title of the tab you would like to be activated by default.</li>\n</ul>\n<p>Here is the controller <em>tabsPanesOptions</em> property:</p>\n<pre><code class="lang-javascript">SomeController = Ember.Controller.extend({\n    tabsMeta: Ember.A([\n            Ember.Object.create({ title: &#39;Foo&#39;, template: &#39;tabs/foo-tabpane&#39;, controller: &#39;ShowcaseComponentsTabsFoo&#39;}),\n            Ember.Object.create({ title: &#39;Bar&#39;, template: &#39;tabs/bar-tabpane&#39;})\n    ]);\n});\n\nThe `template: &#39;some-template&#39;` defines what template to render in the corresponding _Tab Pane_ when the Tab is selected.</code></pre>\n<p>Note that for the <code>Foo</code> tab, a <code>controller</code> property was defined, calling <code>&#123;&#123;controller&#125;&#125;</code> within the tab pane template <code>tabs/foo-tabpane</code> will point to the specified <code>ShowcaseComponentsTabsFoo</code> controller instead of the default controller\nwhich is the controller of the template the <code>&#123;&#123;bs-tabs-panes&#125;&#125;</code> was called from.</p>\n<p>Thats all needed! awesome isn&#39;t it?</p>\n'),
h},useData:!0}),Ember.TEMPLATES["show_components/tabs-with-routes"]=Ember.HTMLBars.template({1:function(a,b,c,d){d.buffer.push("User Profile")},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g="";return d.buffer.push('<h1 id="tabs-in-conjuction-with-routes">Tabs in conjuction with Routes</h1>\n<p>Rendering tab content can be simply done by providing a template per tab using the <em>bs-tabs-panes</em> component,\nAnother possiblity is to have a <em>route per tab</em> for rendering tabs contents, Choose this approach if:</p>\n<ul>\n<li><strong>You need your tabs to be bookmarkable, this is possible because each route is bound to some URL path.</strong></li>\n<li><strong>Your tabs are complicated and have a lot of logic and you need a controller per tab.</strong></li>\n</ul>\n<p>If one or more of the reasons above makes sense to you, read on, otherwise use <em>bs-tabs-panes</em> because its setup is much simpler.</p>\n<h2 id="users-profile-example">Users Profile Example</h2>\n<p>This is much easier to explain by example, so for the sake of example, we&#39;ll build a User profile with 3 tabs.</p>\n<h2 id="defining-routes">Defining routes</h2>\n<p>First, lets define the routes of the User profile:</p>\n<pre><code class="lang-javascript">this.resource(&#39;user&#39;, function() {\n  this.route(&#39;general&#39;);\n  this.route(&#39;privacy&#39;);\n  return this.route(&#39;activities&#39;);\n});</code></pre>\n<p>A resource is required per tabs component, here we define the resource as <em>user</em> because tabs deals with managing a <em>User</em> and a <em>@route</em> is required per tab.</p>\n<h2 id="putting-the-tabs-component-in-the-resource-template-">Putting the Tabs component in the Resource template.</h2>\n<p>In Ember.js, every resource page has its own main template, nested routes are rendered within the <em>resource</em> page, with such hierarchy, it makes sense to put the <em>tabs component</em> in the resource page so it will be available for any nested route that the user visits.</p>\n<p>Content goes into the <code>user</code> template.</p>\n<pre><code class="lang-html">    &#123;&#123;bs-tabs contentBinding="tabsMeta"&#125;&#125;\n    &#123;&#123;outlet&#125;&#125;</code></pre>\n<p>The <code>tabsMeta</code> is an array of the Tabs metadata in the <code>UserController</code>:</p>\n<pre><code class="lang-javascript">\nApp.UserController = Ember.Controller.extend({\n  tabsMeta: [\n    Ember.Object.create({title: &#39;General&#39;, linkTo: &#39;user.general&#39;}),\n    Ember.Object.create({title: &#39;Privacy&#39;, linkTo: &#39;user.privacy&#39;}),\n    Ember.Object.create({title: &#39;Activities&#39;, linkTo: &#39;user.activities&#39;})\n  ]\n});\n`</code></pre>\n<p>The <em>outlet</em> is important so the content of each tab will be rendered beneath the tabs component.</p>\n<h2 id="defining-templates">Defining Templates</h2>\n<p>Simply define a template per nested route, just like you would do if each nested route wouldnt be apart of the tab component.</p>\n<h2 id="live-example">Live example</h2>\n<p>Want to see it alive? take a look here: '),e=(b["link-to"]||a&&a["link-to"]||f).call(a,"user.general",{name:"link-to",hash:{},hashTypes:{},hashContexts:{},fn:this.program(1,d),inverse:this.noop,types:["STRING"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push("</p>\n"),g},useData:!0}),Ember.TEMPLATES["show_components/tabs"]=Ember.HTMLBars.template({1:function(a,b,c,d){d.buffer.push("Tab Panes")},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push('<h1 id="tabs">Tabs</h1>\n<p>Tabs are like Pills but styled differently,\nThe share exactly the same concepts, so this page doesn&#39;t repeat everything, visit Pills for the complete details.</p>\n<h2 id="simple-tabs">Simple Tabs</h2>\n<div class="bs-example">\n    '),d.buffer.push(g((b["bs-tabs"]||a&&a["bs-tabs"]||f).call(a,{name:"bs-tabs",hash:{selectedBinding:"selected",contentBinding:"content"},hashTypes:{selectedBinding:"STRING",contentBinding:"STRING"},hashContexts:{selectedBinding:a,contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\n\n    <br/>\n    <strong>Selected</strong>: "),e=b._triageMustache.call(a,"selected",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">    &#123;&#123;bs-tabs contentBinding="content" selectedBinding="selected"&#125;&#125;</code></pre>\n<p>Controller&#39;s code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsTabsController = Ember.Controller.extend({\n  content: [&#39;Home&#39;, &#39;Profile&#39;, &#39;Messages&#39;]\n});</code></pre>\n<h2 id="panes">Panes</h2>\n<p>Please see '),e=(b["link-to"]||a&&a["link-to"]||f).call(a,"show_components.tabs-panes",{name:"link-to",hash:{},hashTypes:{},hashContexts:{},fn:this.program(1,d),inverse:this.noop,types:["STRING"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),d.buffer.push(" for more info about Tab Panes.</p>\n"),h},useData:!0}),Ember.TEMPLATES["show_components/well"]=Ember.HTMLBars.template({1:function(a,b,c,d){d.buffer.push("    I am in a well, click me!\n")},3:function(a,b,c,d){d.buffer.push("    Look, I&#39;m in a large well!\n")},5:function(a,b,c,d){d.buffer.push("    Look, I&#39;m in a small well!\n")},compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g="";return d.buffer.push('<h1 id="well">Well</h1>\n<h2 id="default-well">Default Well</h2>\n<p>Here is a default well, but <strong>pay attention</strong> that it is clickable, the click will be propagated to the <strong>controller</strong>.</p>\n\n<div class="bs-example">\n'),e=(b["bs-well"]||a&&a["bs-well"]||f).call(a,{name:"bs-well",hash:{clicked:"wellClick"},hashTypes:{clicked:"STRING"},hashContexts:{clicked:a},fn:this.program(1,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-well clicked="wellClick"&#125;&#125;\nI am in a well!\n&#123;&#123;/bs-well&#125;&#125;</code></pre>\n<p><code>wellClick</code> is the function name in the <strong>controller</strong>.</p>\n<h2 id="optional-classes">Optional classes</h2>\n<p>As explained by Bootstrap:</p>\n<blockquote>\n<p>Control padding and rounded corners with two optional modifier classes.</p>\n</blockquote>\n<h3 id="large-well">Large Well</h3>\n<div class="bs-example">\n'),e=(b["bs-well"]||a&&a["bs-well"]||f).call(a,{name:"bs-well",hash:{large:!0},hashTypes:{large:"BOOLEAN"},hashContexts:{large:a},fn:this.program(3,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-well large=true&#125;&#125;\nLook, I&#39;m in a large well!\n&#123;&#123;/bs-well&#125;&#125;</code></pre>\n<p><b>You can set large well by adding <code>class="well-lg"</code> or just set the <code>large</code> property to true</b></p>\n<h3 id="small-well">Small Well</h3>\n<div class="bs-example">\n'),e=(b["bs-well"]||a&&a["bs-well"]||f).call(a,{name:"bs-well",hash:{small:!0},hashTypes:{small:"BOOLEAN"},hashContexts:{small:a},fn:this.program(5,d),inverse:this.noop,types:[],contexts:[],data:d}),null!=e&&d.buffer.push(e),d.buffer.push('</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-well small=true&#125;&#125;\nLook, I&#39;m in a small well!\n&#123;&#123;/bs-well&#125;&#125;</code></pre>\n<p><b>You can set large well by adding <code>class="well-sm"</code> or just set the <code>small</code> property to true</b></p>\n<h2 id="component-properties">Component Properties</h2>\n<div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>large</td>\n                <td>If true, a large well <em>will</em> be rendered by adding the <strong>well-lg</strong> class.</td>\n            </tr>\n            <tr>\n                <td>small</td>\n                <td>If true, a small <em>well</em> will be rendered by adding the <strong>well-sm</strong> class.</td>\n            </tr>\n            <tr>\n                <td>clicked</td>\n                <td>Triggers the specified function name on the <strong>controller</strong> immediately when user clicks the area of the well.</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'),g},useData:!0}),Ember.TEMPLATES["show_components/wizard"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression,g="";return d.buffer.push('<h1 id="wizard">Wizard</h1>\n<p>Wizard is a multi step view component with transitioning workflow,\nWizard has a lot in common with the Tabs component as you can think about each Wizard step as a tab &amp; pane, the main different is that with the Wizard component the transitioning order of the steps is defined a head.</p>\n<h2 id="wizard-sample">Wizard Sample</h2>\n<p>Defining an inline content Wizard with blocks is the simplest form of using the wizard component.</p>\n<div class="bs-example">\n    '),d.buffer.push(f((b["bs-wizard"]||a&&a["bs-wizard"]||e).call(a,{name:"bs-wizard",hash:{contentBinding:"steps"},hashTypes:{contentBinding:"STRING"},hashContexts:{contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">&#123;&#123;bs-wizard contentBinding="steps"&#125;&#125;</code></pre>\n<p><code>contentBinding="steps"</code> defines a property named <em>steps</em> in the current controll that defines the wizard steps,\nHere is the current controll of this example:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsWizardController = Ember.Controller.extend({\n  init: function() {\n    this._super();\n    this.set(&#39;steps&#39;, Ember.A([\n      Ember.Object.create({title: &#39;Foo&#39;, template: &#39;tabs/foo-tabpane&#39;}),\n      Ember.Object.create({title: &#39;Bar&#39;, template: &#39;tabs/bar-tabpane&#39;}),\n      Ember.Object.create({title: &#39;Baz&#39;, template: &#39;tabs/baz-tabpane&#39;})\n    ]));\n  }\n});</code></pre>\n<h2 id="disable-step-selection">Disable Step Selection</h2>\n<p>Sometimes it makes sense to create a wizard with fixed step flow, this can be done by disabling the steps by providing <code>disabled=true</code> per step.</p>\n<p>It is also possible to disallow moving to previous step if needed.</p>\n<div class="bs-example">\n    '),d.buffer.push(f((b["bs-wizard"]||a&&a["bs-wizard"]||e).call(a,{name:"bs-wizard",hash:{contentBinding:"stepsNoPrev",prevAllowed:!1},hashTypes:{contentBinding:"STRING",prevAllowed:"BOOLEAN"},hashContexts:{contentBinding:a,prevAllowed:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-wizard prevAllowed=false contentBinding="stepsNoPrev"&#125;&#125;</code></pre>\n<pre><code class="lang-javascript">Showcase.ShowComponentsWizardController = Ember.Controller.extend({\n  init: function() {\n    this._super();\n    this.set(&#39;steps&#39;, Ember.A([\n      Ember.Object.create({title: &#39;Step1&#39;, template: &#39;tabs/foo-tabpane&#39;, disabled="true"}),\n      Ember.Object.create({title: &#39;Step2&#39;, template: &#39;tabs/bar-tabpane&#39;, disabled="true"}),\n      Ember.Object.create({title: &#39;Step3&#39;, template: &#39;tabs/baz-tabpane&#39;, disabled="true"})\n    ]));\n  }\n});</code></pre>\n<h2 id="programatically-created-wizard">Programatically Created Wizard</h2>\n<p>Creating a wizard programatically should be used if rendering a Wizard is based on some action such as a button click, for example, a modal can be rendered by pressing a button that will render a Wizard within a modal as the example shown below:</p>\n<div class="bs-example">\n    '),d.buffer.push(f((b["bs-button"]||a&&a["bs-button"]||e).call(a,{name:"bs-button",hash:{clicked:"createWizard",type:"primary",title:"Start Wizard"},hashTypes:{clicked:"STRING",type:"STRING",title:"STRING"},hashContexts:{clicked:a,type:a,title:a},types:[],contexts:[],data:d}))),d.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">&#123;&#123;bs-button title="Start Wizard" type="primary" clicked="createWizard"&#125;&#125;</code></pre>\n<p><em>Controller&#39;s code:</em></p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsWizardController = Ember.Controller.extend({\n  actions: {\n    createWizard: function() {\n      var body;\n      body = Bootstrap.BsWizardComponent.extend({\n        content: [\n          Ember.Object.create({title: &#39;Step1&#39;, template: &#39;wizard/step1&#39;, disabled: true}),\n          Ember.Object.create({title: &#39;Step2&#39;, template: &#39;wizard/step2&#39;, disabled: true}),\n          Ember.Object.create({title: &#39;Step3&#39;, template: &#39;wizard/step3&#39;, disabled: true})\n        ],\n        targetObject: this,\n        onNext: "onNext",\n        onPrev: "onPrev",\n        onFinish: &#39;onFinish&#39;\n      });\n      Bootstrap.ModalManager.open(&#39;manualModal&#39;, &#39;Wizard Title...&#39;, body, null, this);\n    },\n    onNext: function() {\n      return console.log(&#39;NEXT&#39;);\n    },\n    onPrev: function() {\n      return console.log(&#39;PREV&#39;);\n    },\n    onFinish: function() {\n      Bootstrap.ModalManager.close(&#39;manualModal&#39;);\n      return Bootstrap.NM.push(&#39;Wizard completed!&#39;);\n    }\n  }\n});</code></pre>\n<p>The controller is responsible for creating the Modal and the Wizard components, our controller listens to the Wizard <em>onFinish</em> event and close the modal as a response plus send an application notification.</p>\n'),g},useData:!0}),Ember.TEMPLATES["social-buttons"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){d.buffer.push('<div class="bs-social">\r\n  <ul class="bs-social-buttons">\r\n    <li>\r\n      <iframe class="github-btn" src="http://ghbtns.com/github-btn.html?user=ember-addons&amp;repo=bootstrap-for-ember&amp;type=watch&amp;count=true" width="100" height="20" title="Star on GitHub"></iframe>\r\n    </li>\r\n    <li>\r\n      <iframe class="github-btn" src="http://ghbtns.com/github-btn.html?user=ember-addons&amp;repo=bootstrap-for-ember&amp;type=fork&amp;count=true" width="102" height="20" title="Fork on GitHub"></iframe>\r\n    </li>\r\n    <li class="follow-btn">\r\n      <a href="https://twitter.com/bs_for_ember" class="twitter-follow-button" data-link-color="#0069D6" data-show-count="true">Follow @bs_for_ember</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n')},useData:!0}),Ember.TEMPLATES["tabs/bar-tabpane"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push(g((b["bs-page-header"]||a&&a["bs-page-header"]||f).call(a,{name:"bs-page-header",hash:{sub:"Tab Pane Content",title:"BAR "},hashTypes:{sub:"STRING",title:"STRING"},hashContexts:{sub:a,title:a},types:[],contexts:[],data:d}))),d.buffer.push("\r\nController is: "),e=b._triageMustache.call(a,"controller",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),h},useData:!0}),Ember.TEMPLATES["tabs/baz-tabpane"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression;d.buffer.push(f((b["bs-page-header"]||a&&a["bs-page-header"]||e).call(a,{name:"bs-page-header",hash:{sub:"Tab Pane Content",title:"BAZ"},hashTypes:{sub:"STRING",title:"STRING"},hashContexts:{sub:a,title:a},types:[],contexts:[],data:d})))},useData:!0}),Ember.TEMPLATES["tabs/foo-tabpane"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push(g((b["bs-page-header"]||a&&a["bs-page-header"]||f).call(a,{name:"bs-page-header",hash:{sub:"Tab Pane Content",title:"FOO"},hashTypes:{sub:"STRING",title:"STRING"},hashContexts:{sub:a,title:a},types:[],contexts:[],data:d}))),d.buffer.push("\r\nController is: "),e=b._triageMustache.call(a,"controller",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),h},useData:!0}),Ember.TEMPLATES.user=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e,f=b.helperMissing,g=this.escapeExpression,h="";return d.buffer.push(g((b["bs-tabs"]||a&&a["bs-tabs"]||f).call(a,{name:"bs-tabs",hash:{contentBinding:"tabsMeta"},hashTypes:{contentBinding:"STRING"},hashContexts:{contentBinding:a},types:[],contexts:[],data:d}))),d.buffer.push("\r\n\r\n"),e=b._triageMustache.call(a,"outlet",{name:"_triageMustache",hash:{},hashTypes:{},hashContexts:{},types:["ID"],contexts:[a],data:d}),null!=e&&d.buffer.push(e),h},useData:!0}),Ember.TEMPLATES["user/activities"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression;d.buffer.push(f((b["bs-page-header"]||a&&a["bs-page-header"]||e).call(a,{name:"bs-page-header",hash:{sub:"User latest Activities",title:"Activities"},hashTypes:{sub:"STRING",title:"STRING"},hashContexts:{sub:a,title:a},types:[],contexts:[],data:d})))},useData:!0}),Ember.TEMPLATES["user/general"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression;d.buffer.push(f((b["bs-page-header"]||a&&a["bs-page-header"]||e).call(a,{name:"bs-page-header",hash:{sub:"User general details",title:"General"},hashTypes:{sub:"STRING",title:"STRING"},hashContexts:{sub:a,title:a},types:[],contexts:[],data:d})))},useData:!0}),Ember.TEMPLATES["user/privacy"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){var e=b.helperMissing,f=this.escapeExpression;d.buffer.push(f((b["bs-page-header"]||a&&a["bs-page-header"]||e).call(a,{name:"bs-page-header",hash:{sub:"User Privacy details",title:"Privacy"},hashTypes:{sub:"STRING",title:"STRING"},hashContexts:{sub:a,title:a},types:[],contexts:[],data:d})))},useData:!0}),Ember.TEMPLATES["wizard/step1"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){d.buffer.push("<h1> Step1 </h1>")},useData:!0}),Ember.TEMPLATES["wizard/step2"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){d.buffer.push("<h1>Step 2</h1>")},useData:!0}),Ember.TEMPLATES["wizard/step3"]=Ember.HTMLBars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(a,b,c,d){d.buffer.push("<h1>Step 3 </h1>")},useData:!0}),function(){!function(){var a,b;a=window.Bootstrap,b=window.Showcase=Ember.Application.create({LOG_TRANSITIONS:!0,LOG_VIEW_LOOKUPS:!0,LOG_ACTIVE_GENERATION:!0}),Ember.ENV={HELPER_PARAM_LOOKUPS:!0},Ember.Handlebars.registerHelper("raw",function(a){return a.fn(a)})}(),function(){(function(){Showcase.Router.map(function(){return this.resource("show_components",function(){return this.route("alert"),this.route("breadcrumbs"),this.route("modal"),this.route("label"),this.route("badge"),this.route("well"),this.route("list-group"),this.route("panel"),this.route("page-header"),this.route("button"),this.route("buttonGroup"),this.route("progressbar"),this.route("pills"),this.route("tabs"),this.route("tabs-panes"),this.route("wizard"),this.route("items_action_bar"),this.route("tabs-with-routes"),this.route("notifications"),this.route("growl-notif"),this.route("popover"),this.resource("user",function(){return this.route("general"),this.route("privacy"),this.route("activities")})})})}).call(this)}(),function(){(function(){Showcase.ApplicationRoute=Ember.Route.extend({model:function(){return[Ember.Object.create({title:"Alert",route:"show_components.alert"}),Ember.Object.create({title:"Breadcrumbs",route:"show_components.breadcrumbs","new":!0}),Ember.Object.create({title:"Modal",route:"show_components.modal"}),Ember.Object.create({title:"Label",route:"show_components.label"}),Ember.Object.create({title:"Badge",route:"show_components.badge"}),Ember.Object.create({title:"Well",route:"show_components.well"}),Ember.Object.create({title:"List Group",route:"show_components.list-group"}),Ember.Object.create({title:"Panel",route:"show_components.panel"}),Ember.Object.create({title:"Page Header",route:"show_components.page-header"}),Ember.Object.create({title:"Button",route:"show_components.button"}),Ember.Object.create({title:"Button Group",route:"show_components.buttonGroup"}),Ember.Object.create({title:"Progressbar",route:"show_components.progressbar"}),Ember.Object.create({title:"Tooltips & Popover","new":!0,route:"show_components.popover"}),Ember.Object.create({title:"Nav - Pills",route:"show_components.pills"}),Ember.Object.create({title:"Nav - Tabs",route:"show_components.tabs"}),Ember.Object.create({title:"Nav - Tabs Panes",route:"show_components.tabs-panes"}),Ember.Object.create({title:"Nav - Tabs with Routes",special:!0,route:"show_components.tabs-with-routes"}),Ember.Object.create({title:"Wizard",special:!0,route:"show_components.wizard"}),Ember.Object.create({title:"Notifications",special:!0,route:"show_components.notifications"}),Ember.Object.create({title:"Items Action Bar","new":!0,route:"show_components.items_action_bar"}),Ember.Object.create({title:"Growl Notifications",special:!0,route:"show_components.growl-notif"})]}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsPopoverRoute=Ember.Route.extend({renderTemplate:function(){var a;return this.render(),a=this.controllerFor("ShowComponentsTooltipBox"),this.render("bs-tooltip-box",{outlet:"bs-tooltip-box",controller:a,into:"application"})}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsAlertController=Ember.Controller.extend({actions:{submit:function(){return alert("Action taken by controller!")},didAlertClosed:function(){return alert("From controller: The -closed- event was triggered.")},didAlertClose:function(){return alert("From controller: The -close- event was triggered.")}}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsButtonController=Ember.Controller.extend({isButtonDisabled:!1,loadingState:null,loadingState1:null,actions:{disableButton:function(){return this.set("isButtonDisabled",!0)},startLoading:function(){var a=this;return this.set("loadingState","loading"),Ember.run.later(function(){return a.set("loadingState",null)},2e3)},startLoading1:function(){var a=this;return this.set("loadingState1","loading"),Ember.run.later(function(){return a.set("loadingState1","completed")},2e3)},buttonWithParam:function(a){return alert("Passed controller as a param: "+a)}}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsItemsActionBarController=Ember.Controller.extend({actionsInBar:[[{title:"To Alerts",disabled:function(a){var b;return a.size<1||"Alerts"!==(null!=a&&null!=(b=a[0])?b.title:void 0)?!0:void 0},transitionTo:"show_components.alert"},{title:"To Panels",transitionTo:"show_components.panel",disabled:function(a){var b;return a.size<1||"Panels"!==(null!=a&&null!=(b=a[0])?b.title:void 0)?!0:void 0}}],[{title:"To Wizard",disabled:function(a){var b;return a.size<1||"Wizards"!==(null!=a&&null!=(b=a[0])?b.title:void 0)?!0:void 0},clickActionName:"wizard"}]],actions:{wizard:function(a){return alert("Wizard pressed!")}},items:[Ember.Object.create({title:"Alerts"}),Ember.Object.create({title:"Panels"}),Ember.Object.create({title:"Wizards"})]})}).call(this)}(),function(){(function(){Showcase.ShowComponentsPanelController=Ember.Controller.extend({actions:{panelClicked:function(){return alert("Hello from controller: A click in a panel!")},panelClosed:function(){return alert("Hello from controller: The panel was closed!")}}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsPopoverController=Ember.Controller.extend({testObject:Ember.Object.createWithMixins({sticky:function(){return Ember.Object.create({user:this,content:"know this is a sticky tooltip! You can hover over it.",trigger:"hover",sticky:!0})}.property()}),user:Ember.Object.create({firstNameBinding:"content.name",title:"rename",template:'name: {{input type="text" value=content.name}}',content:{name:"John"},trigger:"hover",sticky:!0}),hoverPop:Ember.Object.create({title:"I'm a title!",content:"And i'm a content!",trigger:"hover",placement:"right",sticky:!0}),clickPop:Ember.Object.create({title:"Clickable!",content:"<h1>Hello</h1><small>This is a clickable popover with html content!</small>",placement:"left",html:!0}),templPop:Ember.Object.create({firstName:"numbers",title:"Popover with Template",template:"numbers:<ul>{{#each val in content.numbers}}   <li>{{val}}</li>{{/each}}</ul>",content:{numbers:[1,2,3]}})})}).call(this)}(),function(){(function(){Showcase.ShowComponentsProgressbarController=Ember.Controller.extend({prog:0,incrementBy:20,actions:{increment:function(){return this.prog<100?this.incrementProperty("prog",this.incrementBy):this.set("prog",this.incrementBy)}}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsTooltipBoxController=Bootstrap.TooltipBoxController}).call(this)}(),function(){(function(){Showcase.ShowComponentsWellController=Ember.Controller.extend({wellClick:function(){return alert("Hello from controller: A click in a well!")}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsButtonGroupController=Ember.Controller.extend({options:["Home","Profile","Messages"],options2:["Admin","Settings"],optionsWithMeta:[Ember.Object.create({title:"Create",type:"primary"}),Ember.Object.create({title:"Destroy",type:"danger"})]})}).call(this)}(),function(){(function(){Showcase.ShowComponentsPillsController=Ember.Controller.extend({content:["Home","Profile","Messages"],init:function(){return this._super(),this.set("content1",Ember.A([Ember.Object.create({title:"Home","default":!0,disabled:!1}),Ember.Object.create({title:"Admin",disabled:!0})])),this.set("selected1",this.get("content1").objectAt(0))},contentChanged:function(){return console.log("Selection has changed to: "+this.get("selected"))}.observes("selected"),actions:{disableHome:function(){return this.get("content1").objectAt(0).set("disabled",!0)}}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsGrowlNotifController=Ember.Controller.extend({actions:{pushInfo:function(){return Bootstrap.GNM.push("INFO!","Hello, this is just an info message.","info")},pushSuccess:function(){return Bootstrap.GNM.push("SUCCESS!","Successfully performed operation!","success")},pushWarn:function(){return Bootstrap.GNM.push("WARN!","Could not perform operation!","warning")},pushDanger:function(){return Bootstrap.GNM.push("Danger!","System is halting!","danger")}}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsListGroupController=Ember.Controller.extend({listSimple:Ember.A(["Cras justo odio","Dapibus ac facilisis in","Morbi leo risus"]),listWithBadges:Ember.A([Ember.Object.create({title:"Inbox",badge:"45"}),Ember.Object.create({title:"Sent",badge:"33"})]),listWithSub:Ember.A([Ember.Object.create({title:"Inbox",sub:"Incoming mails folder",badge:"45"}),Ember.Object.create({title:"Sent",sub:"Sent emails folder",badge:"33"})])})}).call(this)}(),function(){(function(){Showcase.ShowComponentsModalController=Ember.Controller.extend({message:"Welcome to Bootstrap for Ember..!",myModalButtons:[Ember.Object.create({title:"Submit",clicked:"submit"}),Ember.Object.create({title:"Cancel",clicked:"cancel",dismiss:"modal"})],manualButtons:[Ember.Object.create({title:"Submit",clicked:"submitManual"}),Ember.Object.create({title:"Cancel",dismiss:"modal"})],actions:{submit:function(){return Bootstrap.NM.push("Successfully submitted modal","success"),Bootstrap.ModalManager.hide("myModal")},cancel:function(){return Bootstrap.NM.push("Modal was cancelled","info")},show:function(){return Bootstrap.ModalManager.show("myModal")},submitManual:function(){return Bootstrap.NM.push("Modal destroyed!","success"),Bootstrap.ModalManager.close("manualModal")},createModalProgramatically:function(){var a;return a=Ember.View.extend({template:Ember.Handlebars.compile("This is a programatic ")}),Bootstrap.ModalManager.open("manualModal","Hello","demo-template",this.manualButtons,this)},confirm:function(){return Bootstrap.ModalManager.confirm(this)},modalConfirmed:function(){return Bootstrap.NM.push("Confirmed!","success")},modalCanceled:function(){return Bootstrap.NM.push("Cancelled!","info")}}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsNotificationsController=Ember.Controller.extend({actions:{pushInfo:function(){return Bootstrap.NM.push("Hello, this is just an info message.","info")},pushWarn:function(){return Bootstrap.NM.push("Could not perform operation!","warning")},pushSuccess:function(){return Bootstrap.NM.push("Successfully performed operation!","success")},pushDanger:function(){return Bootstrap.NM.push("Danger! system is halting!","danger")}}})}).call(this)}(),function(){(function(){Showcase.ShowComponentsTabsController=Ember.Controller.extend({content:["Home","Profile","Messages"],init:function(){return this._super(),this.set("selected","Home"),this.set("tabsPanesOptions",Ember.A([Ember.Object.create({title:"Foo",template:"tabs/foo-tabpane"}),Ember.Object.create({title:"Bar",template:"tabs/bar-tabpane"})]))}})}).call(this)}(),function(){(function(){Showcase.ShowcaseComponentsTabsFooController=Ember.Controller.extend()}).call(this)}(),function(){(function(){Showcase.ShowComponentsTabsPanesController=Ember.Controller.extend({tabsMeta:Ember.A([Ember.Object.create({title:"Foo",template:"tabs/foo-tabpane",controller:"ShowcaseComponentsTabsFoo"}),Ember.Object.create({title:"Bar",template:"tabs/bar-tabpane"})])})}).call(this)}(),function(){(function(){Showcase.ShowComponentsWizardController=Ember.Controller.extend({init:function(){return this._super(),this.set("steps",Ember.A([Ember.Object.create({title:"Foo",template:"tabs/foo-tabpane"}),Ember.Object.create({title:"Bar",template:"tabs/bar-tabpane"}),Ember.Object.create({title:"Baz",template:"tabs/baz-tabpane"})])),this.set("stepsNoPrev",Ember.A([Ember.Object.create({title:"Step1",template:"tabs/foo-tabpane",disabled:!0}),Ember.Object.create({title:"Step2",template:"tabs/bar-tabpane",disabled:!0}),Ember.Object.create({title:"Step3",template:"tabs/baz-tabpane",disabled:!0})]))},actions:{createWizard:function(){var a;return a=Bootstrap.BsWizardComponent.extend({content:[Ember.Object.create({title:"Step1",template:"wizard/step1",disabled:!0}),Ember.Object.create({title:"Step2",template:"wizard/step2",disabled:!0}),Ember.Object.create({title:"Step3",template:"wizard/step3",disabled:!0})],targetObject:this,onNext:"onNext",onPrev:"onPrev",onFinish:"onFinish"}),Bootstrap.ModalManager.open("manualModal","Wizard Title...",a,null,this)},onNext:function(){return console.log("NEXT")},onPrev:function(){return console.log("PREV")},onFinish:function(){return Bootstrap.ModalManager.close("manualModal"),Bootstrap.NM.push("Wizard completed!")}}})}).call(this)}(),function(){(function(){Showcase.UserController=Ember.Controller.extend({tabsMeta:[Ember.Object.create({title:"General",linkTo:"user.general"}),Ember.Object.create({title:"Privacy",linkTo:"user.privacy"}),Ember.Object.create({title:"Activities",linkTo:"user.activities"})]})}).call(this)}(),function(){}.call(this)}();